// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JungleTVClient is the client API for JungleTV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JungleTVClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (JungleTV_SignInClient, error)
	EnqueueMedia(ctx context.Context, in *EnqueueMediaRequest, opts ...grpc.CallOption) (*EnqueueMediaResponse, error)
	RemoveOwnQueueEntry(ctx context.Context, in *RemoveOwnQueueEntryRequest, opts ...grpc.CallOption) (*RemoveOwnQueueEntryResponse, error)
	MonitorTicket(ctx context.Context, in *MonitorTicketRequest, opts ...grpc.CallOption) (JungleTV_MonitorTicketClient, error)
	ConsumeMedia(ctx context.Context, in *ConsumeMediaRequest, opts ...grpc.CallOption) (JungleTV_ConsumeMediaClient, error)
	MonitorQueue(ctx context.Context, in *MonitorQueueRequest, opts ...grpc.CallOption) (JungleTV_MonitorQueueClient, error)
	MonitorSkipAndTip(ctx context.Context, in *MonitorSkipAndTipRequest, opts ...grpc.CallOption) (JungleTV_MonitorSkipAndTipClient, error)
	RewardInfo(ctx context.Context, in *RewardInfoRequest, opts ...grpc.CallOption) (*RewardInfoResponse, error)
	SubmitActivityChallenge(ctx context.Context, in *SubmitActivityChallengeRequest, opts ...grpc.CallOption) (*SubmitActivityChallengeResponse, error)
	ProduceSegchaChallenge(ctx context.Context, in *ProduceSegchaChallengeRequest, opts ...grpc.CallOption) (*ProduceSegchaChallengeResponse, error)
	ConsumeChat(ctx context.Context, in *ConsumeChatRequest, opts ...grpc.CallOption) (JungleTV_ConsumeChatClient, error)
	SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error)
	UserPermissionLevel(ctx context.Context, in *UserPermissionLevelRequest, opts ...grpc.CallOption) (*UserPermissionLevelResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	SetChatNickname(ctx context.Context, in *SetChatNicknameRequest, opts ...grpc.CallOption) (*SetChatNicknameResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	Leaderboards(ctx context.Context, in *LeaderboardsRequest, opts ...grpc.CallOption) (*LeaderboardsResponse, error)
	RewardHistory(ctx context.Context, in *RewardHistoryRequest, opts ...grpc.CallOption) (*RewardHistoryResponse, error)
	WithdrawalHistory(ctx context.Context, in *WithdrawalHistoryRequest, opts ...grpc.CallOption) (*WithdrawalHistoryResponse, error)
	OngoingRaffleInfo(ctx context.Context, in *OngoingRaffleInfoRequest, opts ...grpc.CallOption) (*OngoingRaffleInfoResponse, error)
	// moderation endpoints
	ForciblyEnqueueTicket(ctx context.Context, in *ForciblyEnqueueTicketRequest, opts ...grpc.CallOption) (*ForciblyEnqueueTicketResponse, error)
	RemoveQueueEntry(ctx context.Context, in *RemoveQueueEntryRequest, opts ...grpc.CallOption) (*RemoveQueueEntryResponse, error)
	RemoveChatMessage(ctx context.Context, in *RemoveChatMessageRequest, opts ...grpc.CallOption) (*RemoveChatMessageResponse, error)
	SetChatSettings(ctx context.Context, in *SetChatSettingsRequest, opts ...grpc.CallOption) (*SetChatSettingsResponse, error)
	SetVideoEnqueuingEnabled(ctx context.Context, in *SetVideoEnqueuingEnabledRequest, opts ...grpc.CallOption) (*SetVideoEnqueuingEnabledResponse, error)
	UserBans(ctx context.Context, in *UserBansRequest, opts ...grpc.CallOption) (*UserBansResponse, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error)
	RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*RemoveBanResponse, error)
	UserChatMessages(ctx context.Context, in *UserChatMessagesRequest, opts ...grpc.CallOption) (*UserChatMessagesResponse, error)
	DisallowedVideos(ctx context.Context, in *DisallowedVideosRequest, opts ...grpc.CallOption) (*DisallowedVideosResponse, error)
	AddDisallowedVideo(ctx context.Context, in *AddDisallowedVideoRequest, opts ...grpc.CallOption) (*AddDisallowedVideoResponse, error)
	RemoveDisallowedVideo(ctx context.Context, in *RemoveDisallowedVideoRequest, opts ...grpc.CallOption) (*RemoveDisallowedVideoResponse, error)
	UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	SetUserChatNickname(ctx context.Context, in *SetUserChatNicknameRequest, opts ...grpc.CallOption) (*SetUserChatNicknameResponse, error)
	SetPricesMultiplier(ctx context.Context, in *SetPricesMultiplierRequest, opts ...grpc.CallOption) (*SetPricesMultiplierResponse, error)
	SetCrowdfundedSkippingEnabled(ctx context.Context, in *SetCrowdfundedSkippingEnabledRequest, opts ...grpc.CallOption) (*SetCrowdfundedSkippingEnabledResponse, error)
	SetSkipPriceMultiplier(ctx context.Context, in *SetSkipPriceMultiplierRequest, opts ...grpc.CallOption) (*SetSkipPriceMultiplierResponse, error)
	ConfirmRaffleWinner(ctx context.Context, in *ConfirmRaffleWinnerRequest, opts ...grpc.CallOption) (*ConfirmRaffleWinnerResponse, error)
	CompleteRaffle(ctx context.Context, in *CompleteRaffleRequest, opts ...grpc.CallOption) (*CompleteRaffleResponse, error)
	RedrawRaffle(ctx context.Context, in *RedrawRaffleRequest, opts ...grpc.CallOption) (*RedrawRaffleResponse, error)
	TriggerAnnouncementsNotification(ctx context.Context, in *TriggerAnnouncementsNotificationRequest, opts ...grpc.CallOption) (*TriggerAnnouncementsNotificationResponse, error)
	SpectatorInfo(ctx context.Context, in *SpectatorInfoRequest, opts ...grpc.CallOption) (*Spectator, error)
	ResetSpectatorStatus(ctx context.Context, in *ResetSpectatorStatusRequest, opts ...grpc.CallOption) (*ResetSpectatorStatusResponse, error)
	MonitorModerationSettings(ctx context.Context, in *MonitorModerationSettingsRequest, opts ...grpc.CallOption) (JungleTV_MonitorModerationSettingsClient, error)
	SetOwnQueueEntryRemovalAllowed(ctx context.Context, in *SetOwnQueueEntryRemovalAllowedRequest, opts ...grpc.CallOption) (*SetOwnQueueEntryRemovalAllowedResponse, error)
	SetNewQueueEntriesAlwaysUnskippable(ctx context.Context, in *SetNewQueueEntriesAlwaysUnskippableRequest, opts ...grpc.CallOption) (*SetNewQueueEntriesAlwaysUnskippableResponse, error)
	SetSkippingEnabled(ctx context.Context, in *SetSkippingEnabledRequest, opts ...grpc.CallOption) (*SetSkippingEnabledResponse, error)
}

type jungleTVClient struct {
	cc grpc.ClientConnInterface
}

func NewJungleTVClient(cc grpc.ClientConnInterface) JungleTVClient {
	return &jungleTVClient{cc}
}

func (c *jungleTVClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (JungleTV_SignInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JungleTV_serviceDesc.Streams[0], "/jungletv.JungleTV/SignIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVSignInClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_SignInClient interface {
	Recv() (*SignInProgress, error)
	grpc.ClientStream
}

type jungleTVSignInClient struct {
	grpc.ClientStream
}

func (x *jungleTVSignInClient) Recv() (*SignInProgress, error) {
	m := new(SignInProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) EnqueueMedia(ctx context.Context, in *EnqueueMediaRequest, opts ...grpc.CallOption) (*EnqueueMediaResponse, error) {
	out := new(EnqueueMediaResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/EnqueueMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveOwnQueueEntry(ctx context.Context, in *RemoveOwnQueueEntryRequest, opts ...grpc.CallOption) (*RemoveOwnQueueEntryResponse, error) {
	out := new(RemoveOwnQueueEntryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveOwnQueueEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) MonitorTicket(ctx context.Context, in *MonitorTicketRequest, opts ...grpc.CallOption) (JungleTV_MonitorTicketClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JungleTV_serviceDesc.Streams[1], "/jungletv.JungleTV/MonitorTicket", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorTicketClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorTicketClient interface {
	Recv() (*EnqueueMediaTicket, error)
	grpc.ClientStream
}

type jungleTVMonitorTicketClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorTicketClient) Recv() (*EnqueueMediaTicket, error) {
	m := new(EnqueueMediaTicket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) ConsumeMedia(ctx context.Context, in *ConsumeMediaRequest, opts ...grpc.CallOption) (JungleTV_ConsumeMediaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JungleTV_serviceDesc.Streams[2], "/jungletv.JungleTV/ConsumeMedia", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVConsumeMediaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_ConsumeMediaClient interface {
	Recv() (*MediaConsumptionCheckpoint, error)
	grpc.ClientStream
}

type jungleTVConsumeMediaClient struct {
	grpc.ClientStream
}

func (x *jungleTVConsumeMediaClient) Recv() (*MediaConsumptionCheckpoint, error) {
	m := new(MediaConsumptionCheckpoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) MonitorQueue(ctx context.Context, in *MonitorQueueRequest, opts ...grpc.CallOption) (JungleTV_MonitorQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JungleTV_serviceDesc.Streams[3], "/jungletv.JungleTV/MonitorQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorQueueClient interface {
	Recv() (*Queue, error)
	grpc.ClientStream
}

type jungleTVMonitorQueueClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorQueueClient) Recv() (*Queue, error) {
	m := new(Queue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) MonitorSkipAndTip(ctx context.Context, in *MonitorSkipAndTipRequest, opts ...grpc.CallOption) (JungleTV_MonitorSkipAndTipClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JungleTV_serviceDesc.Streams[4], "/jungletv.JungleTV/MonitorSkipAndTip", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorSkipAndTipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorSkipAndTipClient interface {
	Recv() (*SkipAndTipStatus, error)
	grpc.ClientStream
}

type jungleTVMonitorSkipAndTipClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorSkipAndTipClient) Recv() (*SkipAndTipStatus, error) {
	m := new(SkipAndTipStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) RewardInfo(ctx context.Context, in *RewardInfoRequest, opts ...grpc.CallOption) (*RewardInfoResponse, error) {
	out := new(RewardInfoResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SubmitActivityChallenge(ctx context.Context, in *SubmitActivityChallengeRequest, opts ...grpc.CallOption) (*SubmitActivityChallengeResponse, error) {
	out := new(SubmitActivityChallengeResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SubmitActivityChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ProduceSegchaChallenge(ctx context.Context, in *ProduceSegchaChallengeRequest, opts ...grpc.CallOption) (*ProduceSegchaChallengeResponse, error) {
	out := new(ProduceSegchaChallengeResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ProduceSegchaChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConsumeChat(ctx context.Context, in *ConsumeChatRequest, opts ...grpc.CallOption) (JungleTV_ConsumeChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JungleTV_serviceDesc.Streams[5], "/jungletv.JungleTV/ConsumeChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVConsumeChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_ConsumeChatClient interface {
	Recv() (*ChatUpdate, error)
	grpc.ClientStream
}

type jungleTVConsumeChatClient struct {
	grpc.ClientStream
}

func (x *jungleTVConsumeChatClient) Recv() (*ChatUpdate, error) {
	m := new(ChatUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error) {
	out := new(SendChatMessageResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SendChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserPermissionLevel(ctx context.Context, in *UserPermissionLevelRequest, opts ...grpc.CallOption) (*UserPermissionLevelResponse, error) {
	out := new(UserPermissionLevelResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserPermissionLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetChatNickname(ctx context.Context, in *SetChatNicknameRequest, opts ...grpc.CallOption) (*SetChatNicknameResponse, error) {
	out := new(SetChatNicknameResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetChatNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) Leaderboards(ctx context.Context, in *LeaderboardsRequest, opts ...grpc.CallOption) (*LeaderboardsResponse, error) {
	out := new(LeaderboardsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/Leaderboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RewardHistory(ctx context.Context, in *RewardHistoryRequest, opts ...grpc.CallOption) (*RewardHistoryResponse, error) {
	out := new(RewardHistoryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RewardHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) WithdrawalHistory(ctx context.Context, in *WithdrawalHistoryRequest, opts ...grpc.CallOption) (*WithdrawalHistoryResponse, error) {
	out := new(WithdrawalHistoryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/WithdrawalHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) OngoingRaffleInfo(ctx context.Context, in *OngoingRaffleInfoRequest, opts ...grpc.CallOption) (*OngoingRaffleInfoResponse, error) {
	out := new(OngoingRaffleInfoResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/OngoingRaffleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ForciblyEnqueueTicket(ctx context.Context, in *ForciblyEnqueueTicketRequest, opts ...grpc.CallOption) (*ForciblyEnqueueTicketResponse, error) {
	out := new(ForciblyEnqueueTicketResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ForciblyEnqueueTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveQueueEntry(ctx context.Context, in *RemoveQueueEntryRequest, opts ...grpc.CallOption) (*RemoveQueueEntryResponse, error) {
	out := new(RemoveQueueEntryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveQueueEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveChatMessage(ctx context.Context, in *RemoveChatMessageRequest, opts ...grpc.CallOption) (*RemoveChatMessageResponse, error) {
	out := new(RemoveChatMessageResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetChatSettings(ctx context.Context, in *SetChatSettingsRequest, opts ...grpc.CallOption) (*SetChatSettingsResponse, error) {
	out := new(SetChatSettingsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetChatSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetVideoEnqueuingEnabled(ctx context.Context, in *SetVideoEnqueuingEnabledRequest, opts ...grpc.CallOption) (*SetVideoEnqueuingEnabledResponse, error) {
	out := new(SetVideoEnqueuingEnabledResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetVideoEnqueuingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserBans(ctx context.Context, in *UserBansRequest, opts ...grpc.CallOption) (*UserBansResponse, error) {
	out := new(UserBansResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error) {
	out := new(BanUserResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*RemoveBanResponse, error) {
	out := new(RemoveBanResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserChatMessages(ctx context.Context, in *UserChatMessagesRequest, opts ...grpc.CallOption) (*UserChatMessagesResponse, error) {
	out := new(UserChatMessagesResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserChatMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) DisallowedVideos(ctx context.Context, in *DisallowedVideosRequest, opts ...grpc.CallOption) (*DisallowedVideosResponse, error) {
	out := new(DisallowedVideosResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/DisallowedVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) AddDisallowedVideo(ctx context.Context, in *AddDisallowedVideoRequest, opts ...grpc.CallOption) (*AddDisallowedVideoResponse, error) {
	out := new(AddDisallowedVideoResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/AddDisallowedVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveDisallowedVideo(ctx context.Context, in *RemoveDisallowedVideoRequest, opts ...grpc.CallOption) (*RemoveDisallowedVideoResponse, error) {
	out := new(RemoveDisallowedVideoResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveDisallowedVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetUserChatNickname(ctx context.Context, in *SetUserChatNicknameRequest, opts ...grpc.CallOption) (*SetUserChatNicknameResponse, error) {
	out := new(SetUserChatNicknameResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetUserChatNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetPricesMultiplier(ctx context.Context, in *SetPricesMultiplierRequest, opts ...grpc.CallOption) (*SetPricesMultiplierResponse, error) {
	out := new(SetPricesMultiplierResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetPricesMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetCrowdfundedSkippingEnabled(ctx context.Context, in *SetCrowdfundedSkippingEnabledRequest, opts ...grpc.CallOption) (*SetCrowdfundedSkippingEnabledResponse, error) {
	out := new(SetCrowdfundedSkippingEnabledResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetCrowdfundedSkippingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetSkipPriceMultiplier(ctx context.Context, in *SetSkipPriceMultiplierRequest, opts ...grpc.CallOption) (*SetSkipPriceMultiplierResponse, error) {
	out := new(SetSkipPriceMultiplierResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetSkipPriceMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConfirmRaffleWinner(ctx context.Context, in *ConfirmRaffleWinnerRequest, opts ...grpc.CallOption) (*ConfirmRaffleWinnerResponse, error) {
	out := new(ConfirmRaffleWinnerResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ConfirmRaffleWinner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) CompleteRaffle(ctx context.Context, in *CompleteRaffleRequest, opts ...grpc.CallOption) (*CompleteRaffleResponse, error) {
	out := new(CompleteRaffleResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/CompleteRaffle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RedrawRaffle(ctx context.Context, in *RedrawRaffleRequest, opts ...grpc.CallOption) (*RedrawRaffleResponse, error) {
	out := new(RedrawRaffleResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RedrawRaffle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) TriggerAnnouncementsNotification(ctx context.Context, in *TriggerAnnouncementsNotificationRequest, opts ...grpc.CallOption) (*TriggerAnnouncementsNotificationResponse, error) {
	out := new(TriggerAnnouncementsNotificationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/TriggerAnnouncementsNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SpectatorInfo(ctx context.Context, in *SpectatorInfoRequest, opts ...grpc.CallOption) (*Spectator, error) {
	out := new(Spectator)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SpectatorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ResetSpectatorStatus(ctx context.Context, in *ResetSpectatorStatusRequest, opts ...grpc.CallOption) (*ResetSpectatorStatusResponse, error) {
	out := new(ResetSpectatorStatusResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ResetSpectatorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) MonitorModerationSettings(ctx context.Context, in *MonitorModerationSettingsRequest, opts ...grpc.CallOption) (JungleTV_MonitorModerationSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JungleTV_serviceDesc.Streams[6], "/jungletv.JungleTV/MonitorModerationSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorModerationSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorModerationSettingsClient interface {
	Recv() (*ModerationSettingsOverview, error)
	grpc.ClientStream
}

type jungleTVMonitorModerationSettingsClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorModerationSettingsClient) Recv() (*ModerationSettingsOverview, error) {
	m := new(ModerationSettingsOverview)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) SetOwnQueueEntryRemovalAllowed(ctx context.Context, in *SetOwnQueueEntryRemovalAllowedRequest, opts ...grpc.CallOption) (*SetOwnQueueEntryRemovalAllowedResponse, error) {
	out := new(SetOwnQueueEntryRemovalAllowedResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetOwnQueueEntryRemovalAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetNewQueueEntriesAlwaysUnskippable(ctx context.Context, in *SetNewQueueEntriesAlwaysUnskippableRequest, opts ...grpc.CallOption) (*SetNewQueueEntriesAlwaysUnskippableResponse, error) {
	out := new(SetNewQueueEntriesAlwaysUnskippableResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetNewQueueEntriesAlwaysUnskippable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetSkippingEnabled(ctx context.Context, in *SetSkippingEnabledRequest, opts ...grpc.CallOption) (*SetSkippingEnabledResponse, error) {
	out := new(SetSkippingEnabledResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetSkippingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JungleTVServer is the server API for JungleTV service.
// All implementations must embed UnimplementedJungleTVServer
// for forward compatibility
type JungleTVServer interface {
	SignIn(*SignInRequest, JungleTV_SignInServer) error
	EnqueueMedia(context.Context, *EnqueueMediaRequest) (*EnqueueMediaResponse, error)
	RemoveOwnQueueEntry(context.Context, *RemoveOwnQueueEntryRequest) (*RemoveOwnQueueEntryResponse, error)
	MonitorTicket(*MonitorTicketRequest, JungleTV_MonitorTicketServer) error
	ConsumeMedia(*ConsumeMediaRequest, JungleTV_ConsumeMediaServer) error
	MonitorQueue(*MonitorQueueRequest, JungleTV_MonitorQueueServer) error
	MonitorSkipAndTip(*MonitorSkipAndTipRequest, JungleTV_MonitorSkipAndTipServer) error
	RewardInfo(context.Context, *RewardInfoRequest) (*RewardInfoResponse, error)
	SubmitActivityChallenge(context.Context, *SubmitActivityChallengeRequest) (*SubmitActivityChallengeResponse, error)
	ProduceSegchaChallenge(context.Context, *ProduceSegchaChallengeRequest) (*ProduceSegchaChallengeResponse, error)
	ConsumeChat(*ConsumeChatRequest, JungleTV_ConsumeChatServer) error
	SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageResponse, error)
	UserPermissionLevel(context.Context, *UserPermissionLevelRequest) (*UserPermissionLevelResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	SetChatNickname(context.Context, *SetChatNicknameRequest) (*SetChatNicknameResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	Leaderboards(context.Context, *LeaderboardsRequest) (*LeaderboardsResponse, error)
	RewardHistory(context.Context, *RewardHistoryRequest) (*RewardHistoryResponse, error)
	WithdrawalHistory(context.Context, *WithdrawalHistoryRequest) (*WithdrawalHistoryResponse, error)
	OngoingRaffleInfo(context.Context, *OngoingRaffleInfoRequest) (*OngoingRaffleInfoResponse, error)
	// moderation endpoints
	ForciblyEnqueueTicket(context.Context, *ForciblyEnqueueTicketRequest) (*ForciblyEnqueueTicketResponse, error)
	RemoveQueueEntry(context.Context, *RemoveQueueEntryRequest) (*RemoveQueueEntryResponse, error)
	RemoveChatMessage(context.Context, *RemoveChatMessageRequest) (*RemoveChatMessageResponse, error)
	SetChatSettings(context.Context, *SetChatSettingsRequest) (*SetChatSettingsResponse, error)
	SetVideoEnqueuingEnabled(context.Context, *SetVideoEnqueuingEnabledRequest) (*SetVideoEnqueuingEnabledResponse, error)
	UserBans(context.Context, *UserBansRequest) (*UserBansResponse, error)
	BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error)
	RemoveBan(context.Context, *RemoveBanRequest) (*RemoveBanResponse, error)
	UserChatMessages(context.Context, *UserChatMessagesRequest) (*UserChatMessagesResponse, error)
	DisallowedVideos(context.Context, *DisallowedVideosRequest) (*DisallowedVideosResponse, error)
	AddDisallowedVideo(context.Context, *AddDisallowedVideoRequest) (*AddDisallowedVideoResponse, error)
	RemoveDisallowedVideo(context.Context, *RemoveDisallowedVideoRequest) (*RemoveDisallowedVideoResponse, error)
	UpdateDocument(context.Context, *Document) (*UpdateDocumentResponse, error)
	SetUserChatNickname(context.Context, *SetUserChatNicknameRequest) (*SetUserChatNicknameResponse, error)
	SetPricesMultiplier(context.Context, *SetPricesMultiplierRequest) (*SetPricesMultiplierResponse, error)
	SetCrowdfundedSkippingEnabled(context.Context, *SetCrowdfundedSkippingEnabledRequest) (*SetCrowdfundedSkippingEnabledResponse, error)
	SetSkipPriceMultiplier(context.Context, *SetSkipPriceMultiplierRequest) (*SetSkipPriceMultiplierResponse, error)
	ConfirmRaffleWinner(context.Context, *ConfirmRaffleWinnerRequest) (*ConfirmRaffleWinnerResponse, error)
	CompleteRaffle(context.Context, *CompleteRaffleRequest) (*CompleteRaffleResponse, error)
	RedrawRaffle(context.Context, *RedrawRaffleRequest) (*RedrawRaffleResponse, error)
	TriggerAnnouncementsNotification(context.Context, *TriggerAnnouncementsNotificationRequest) (*TriggerAnnouncementsNotificationResponse, error)
	SpectatorInfo(context.Context, *SpectatorInfoRequest) (*Spectator, error)
	ResetSpectatorStatus(context.Context, *ResetSpectatorStatusRequest) (*ResetSpectatorStatusResponse, error)
	MonitorModerationSettings(*MonitorModerationSettingsRequest, JungleTV_MonitorModerationSettingsServer) error
	SetOwnQueueEntryRemovalAllowed(context.Context, *SetOwnQueueEntryRemovalAllowedRequest) (*SetOwnQueueEntryRemovalAllowedResponse, error)
	SetNewQueueEntriesAlwaysUnskippable(context.Context, *SetNewQueueEntriesAlwaysUnskippableRequest) (*SetNewQueueEntriesAlwaysUnskippableResponse, error)
	SetSkippingEnabled(context.Context, *SetSkippingEnabledRequest) (*SetSkippingEnabledResponse, error)
	mustEmbedUnimplementedJungleTVServer()
}

// UnimplementedJungleTVServer must be embedded to have forward compatible implementations.
type UnimplementedJungleTVServer struct {
}

func (UnimplementedJungleTVServer) SignIn(*SignInRequest, JungleTV_SignInServer) error {
	return status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedJungleTVServer) EnqueueMedia(context.Context, *EnqueueMediaRequest) (*EnqueueMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueMedia not implemented")
}
func (UnimplementedJungleTVServer) RemoveOwnQueueEntry(context.Context, *RemoveOwnQueueEntryRequest) (*RemoveOwnQueueEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOwnQueueEntry not implemented")
}
func (UnimplementedJungleTVServer) MonitorTicket(*MonitorTicketRequest, JungleTV_MonitorTicketServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorTicket not implemented")
}
func (UnimplementedJungleTVServer) ConsumeMedia(*ConsumeMediaRequest, JungleTV_ConsumeMediaServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeMedia not implemented")
}
func (UnimplementedJungleTVServer) MonitorQueue(*MonitorQueueRequest, JungleTV_MonitorQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorQueue not implemented")
}
func (UnimplementedJungleTVServer) MonitorSkipAndTip(*MonitorSkipAndTipRequest, JungleTV_MonitorSkipAndTipServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorSkipAndTip not implemented")
}
func (UnimplementedJungleTVServer) RewardInfo(context.Context, *RewardInfoRequest) (*RewardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardInfo not implemented")
}
func (UnimplementedJungleTVServer) SubmitActivityChallenge(context.Context, *SubmitActivityChallengeRequest) (*SubmitActivityChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitActivityChallenge not implemented")
}
func (UnimplementedJungleTVServer) ProduceSegchaChallenge(context.Context, *ProduceSegchaChallengeRequest) (*ProduceSegchaChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceSegchaChallenge not implemented")
}
func (UnimplementedJungleTVServer) ConsumeChat(*ConsumeChatRequest, JungleTV_ConsumeChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeChat not implemented")
}
func (UnimplementedJungleTVServer) SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (UnimplementedJungleTVServer) UserPermissionLevel(context.Context, *UserPermissionLevelRequest) (*UserPermissionLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPermissionLevel not implemented")
}
func (UnimplementedJungleTVServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedJungleTVServer) SetChatNickname(context.Context, *SetChatNicknameRequest) (*SetChatNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatNickname not implemented")
}
func (UnimplementedJungleTVServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedJungleTVServer) Leaderboards(context.Context, *LeaderboardsRequest) (*LeaderboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leaderboards not implemented")
}
func (UnimplementedJungleTVServer) RewardHistory(context.Context, *RewardHistoryRequest) (*RewardHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardHistory not implemented")
}
func (UnimplementedJungleTVServer) WithdrawalHistory(context.Context, *WithdrawalHistoryRequest) (*WithdrawalHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalHistory not implemented")
}
func (UnimplementedJungleTVServer) OngoingRaffleInfo(context.Context, *OngoingRaffleInfoRequest) (*OngoingRaffleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OngoingRaffleInfo not implemented")
}
func (UnimplementedJungleTVServer) ForciblyEnqueueTicket(context.Context, *ForciblyEnqueueTicketRequest) (*ForciblyEnqueueTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForciblyEnqueueTicket not implemented")
}
func (UnimplementedJungleTVServer) RemoveQueueEntry(context.Context, *RemoveQueueEntryRequest) (*RemoveQueueEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQueueEntry not implemented")
}
func (UnimplementedJungleTVServer) RemoveChatMessage(context.Context, *RemoveChatMessageRequest) (*RemoveChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChatMessage not implemented")
}
func (UnimplementedJungleTVServer) SetChatSettings(context.Context, *SetChatSettingsRequest) (*SetChatSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatSettings not implemented")
}
func (UnimplementedJungleTVServer) SetVideoEnqueuingEnabled(context.Context, *SetVideoEnqueuingEnabledRequest) (*SetVideoEnqueuingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVideoEnqueuingEnabled not implemented")
}
func (UnimplementedJungleTVServer) UserBans(context.Context, *UserBansRequest) (*UserBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBans not implemented")
}
func (UnimplementedJungleTVServer) BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedJungleTVServer) RemoveBan(context.Context, *RemoveBanRequest) (*RemoveBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBan not implemented")
}
func (UnimplementedJungleTVServer) UserChatMessages(context.Context, *UserChatMessagesRequest) (*UserChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChatMessages not implemented")
}
func (UnimplementedJungleTVServer) DisallowedVideos(context.Context, *DisallowedVideosRequest) (*DisallowedVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisallowedVideos not implemented")
}
func (UnimplementedJungleTVServer) AddDisallowedVideo(context.Context, *AddDisallowedVideoRequest) (*AddDisallowedVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDisallowedVideo not implemented")
}
func (UnimplementedJungleTVServer) RemoveDisallowedVideo(context.Context, *RemoveDisallowedVideoRequest) (*RemoveDisallowedVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDisallowedVideo not implemented")
}
func (UnimplementedJungleTVServer) UpdateDocument(context.Context, *Document) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedJungleTVServer) SetUserChatNickname(context.Context, *SetUserChatNicknameRequest) (*SetUserChatNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserChatNickname not implemented")
}
func (UnimplementedJungleTVServer) SetPricesMultiplier(context.Context, *SetPricesMultiplierRequest) (*SetPricesMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPricesMultiplier not implemented")
}
func (UnimplementedJungleTVServer) SetCrowdfundedSkippingEnabled(context.Context, *SetCrowdfundedSkippingEnabledRequest) (*SetCrowdfundedSkippingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCrowdfundedSkippingEnabled not implemented")
}
func (UnimplementedJungleTVServer) SetSkipPriceMultiplier(context.Context, *SetSkipPriceMultiplierRequest) (*SetSkipPriceMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSkipPriceMultiplier not implemented")
}
func (UnimplementedJungleTVServer) ConfirmRaffleWinner(context.Context, *ConfirmRaffleWinnerRequest) (*ConfirmRaffleWinnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRaffleWinner not implemented")
}
func (UnimplementedJungleTVServer) CompleteRaffle(context.Context, *CompleteRaffleRequest) (*CompleteRaffleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRaffle not implemented")
}
func (UnimplementedJungleTVServer) RedrawRaffle(context.Context, *RedrawRaffleRequest) (*RedrawRaffleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedrawRaffle not implemented")
}
func (UnimplementedJungleTVServer) TriggerAnnouncementsNotification(context.Context, *TriggerAnnouncementsNotificationRequest) (*TriggerAnnouncementsNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAnnouncementsNotification not implemented")
}
func (UnimplementedJungleTVServer) SpectatorInfo(context.Context, *SpectatorInfoRequest) (*Spectator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpectatorInfo not implemented")
}
func (UnimplementedJungleTVServer) ResetSpectatorStatus(context.Context, *ResetSpectatorStatusRequest) (*ResetSpectatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSpectatorStatus not implemented")
}
func (UnimplementedJungleTVServer) MonitorModerationSettings(*MonitorModerationSettingsRequest, JungleTV_MonitorModerationSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorModerationSettings not implemented")
}
func (UnimplementedJungleTVServer) SetOwnQueueEntryRemovalAllowed(context.Context, *SetOwnQueueEntryRemovalAllowedRequest) (*SetOwnQueueEntryRemovalAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOwnQueueEntryRemovalAllowed not implemented")
}
func (UnimplementedJungleTVServer) SetNewQueueEntriesAlwaysUnskippable(context.Context, *SetNewQueueEntriesAlwaysUnskippableRequest) (*SetNewQueueEntriesAlwaysUnskippableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewQueueEntriesAlwaysUnskippable not implemented")
}
func (UnimplementedJungleTVServer) SetSkippingEnabled(context.Context, *SetSkippingEnabledRequest) (*SetSkippingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSkippingEnabled not implemented")
}
func (UnimplementedJungleTVServer) mustEmbedUnimplementedJungleTVServer() {}

// UnsafeJungleTVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JungleTVServer will
// result in compilation errors.
type UnsafeJungleTVServer interface {
	mustEmbedUnimplementedJungleTVServer()
}

func RegisterJungleTVServer(s grpc.ServiceRegistrar, srv JungleTVServer) {
	s.RegisterService(&_JungleTV_serviceDesc, srv)
}

func _JungleTV_SignIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignInRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).SignIn(m, &jungleTVSignInServer{stream})
}

type JungleTV_SignInServer interface {
	Send(*SignInProgress) error
	grpc.ServerStream
}

type jungleTVSignInServer struct {
	grpc.ServerStream
}

func (x *jungleTVSignInServer) Send(m *SignInProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_EnqueueMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).EnqueueMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/EnqueueMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).EnqueueMedia(ctx, req.(*EnqueueMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveOwnQueueEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOwnQueueEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveOwnQueueEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveOwnQueueEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveOwnQueueEntry(ctx, req.(*RemoveOwnQueueEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_MonitorTicket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorTicketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorTicket(m, &jungleTVMonitorTicketServer{stream})
}

type JungleTV_MonitorTicketServer interface {
	Send(*EnqueueMediaTicket) error
	grpc.ServerStream
}

type jungleTVMonitorTicketServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorTicketServer) Send(m *EnqueueMediaTicket) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_ConsumeMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeMediaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).ConsumeMedia(m, &jungleTVConsumeMediaServer{stream})
}

type JungleTV_ConsumeMediaServer interface {
	Send(*MediaConsumptionCheckpoint) error
	grpc.ServerStream
}

type jungleTVConsumeMediaServer struct {
	grpc.ServerStream
}

func (x *jungleTVConsumeMediaServer) Send(m *MediaConsumptionCheckpoint) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_MonitorQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorQueue(m, &jungleTVMonitorQueueServer{stream})
}

type JungleTV_MonitorQueueServer interface {
	Send(*Queue) error
	grpc.ServerStream
}

type jungleTVMonitorQueueServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorQueueServer) Send(m *Queue) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_MonitorSkipAndTip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorSkipAndTipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorSkipAndTip(m, &jungleTVMonitorSkipAndTipServer{stream})
}

type JungleTV_MonitorSkipAndTipServer interface {
	Send(*SkipAndTipStatus) error
	grpc.ServerStream
}

type jungleTVMonitorSkipAndTipServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorSkipAndTipServer) Send(m *SkipAndTipStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_RewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RewardInfo(ctx, req.(*RewardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SubmitActivityChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitActivityChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SubmitActivityChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SubmitActivityChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SubmitActivityChallenge(ctx, req.(*SubmitActivityChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ProduceSegchaChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceSegchaChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ProduceSegchaChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ProduceSegchaChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ProduceSegchaChallenge(ctx, req.(*ProduceSegchaChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConsumeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).ConsumeChat(m, &jungleTVConsumeChatServer{stream})
}

type JungleTV_ConsumeChatServer interface {
	Send(*ChatUpdate) error
	grpc.ServerStream
}

type jungleTVConsumeChatServer struct {
	grpc.ServerStream
}

func (x *jungleTVConsumeChatServer) Send(m *ChatUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SendChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SendChatMessage(ctx, req.(*SendChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserPermissionLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermissionLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserPermissionLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserPermissionLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserPermissionLevel(ctx, req.(*UserPermissionLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetChatNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetChatNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetChatNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetChatNickname(ctx, req.(*SetChatNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_Leaderboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).Leaderboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/Leaderboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).Leaderboards(ctx, req.(*LeaderboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RewardHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RewardHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RewardHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RewardHistory(ctx, req.(*RewardHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_WithdrawalHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).WithdrawalHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/WithdrawalHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).WithdrawalHistory(ctx, req.(*WithdrawalHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_OngoingRaffleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OngoingRaffleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).OngoingRaffleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/OngoingRaffleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).OngoingRaffleInfo(ctx, req.(*OngoingRaffleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ForciblyEnqueueTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForciblyEnqueueTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ForciblyEnqueueTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ForciblyEnqueueTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ForciblyEnqueueTicket(ctx, req.(*ForciblyEnqueueTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveQueueEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQueueEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveQueueEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveQueueEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveQueueEntry(ctx, req.(*RemoveQueueEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveChatMessage(ctx, req.(*RemoveChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetChatSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetChatSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetChatSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetChatSettings(ctx, req.(*SetChatSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetVideoEnqueuingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVideoEnqueuingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetVideoEnqueuingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetVideoEnqueuingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetVideoEnqueuingEnabled(ctx, req.(*SetVideoEnqueuingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserBans(ctx, req.(*UserBansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveBan(ctx, req.(*RemoveBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserChatMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserChatMessages(ctx, req.(*UserChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_DisallowedVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisallowedVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).DisallowedVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/DisallowedVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).DisallowedVideos(ctx, req.(*DisallowedVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_AddDisallowedVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDisallowedVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).AddDisallowedVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/AddDisallowedVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).AddDisallowedVideo(ctx, req.(*AddDisallowedVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveDisallowedVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDisallowedVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveDisallowedVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveDisallowedVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveDisallowedVideo(ctx, req.(*RemoveDisallowedVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UpdateDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetUserChatNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserChatNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetUserChatNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetUserChatNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetUserChatNickname(ctx, req.(*SetUserChatNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetPricesMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPricesMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetPricesMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetPricesMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetPricesMultiplier(ctx, req.(*SetPricesMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetCrowdfundedSkippingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCrowdfundedSkippingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetCrowdfundedSkippingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetCrowdfundedSkippingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetCrowdfundedSkippingEnabled(ctx, req.(*SetCrowdfundedSkippingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetSkipPriceMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSkipPriceMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetSkipPriceMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetSkipPriceMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetSkipPriceMultiplier(ctx, req.(*SetSkipPriceMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConfirmRaffleWinner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRaffleWinnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ConfirmRaffleWinner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ConfirmRaffleWinner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ConfirmRaffleWinner(ctx, req.(*ConfirmRaffleWinnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_CompleteRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRaffleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).CompleteRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/CompleteRaffle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).CompleteRaffle(ctx, req.(*CompleteRaffleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RedrawRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedrawRaffleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RedrawRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RedrawRaffle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RedrawRaffle(ctx, req.(*RedrawRaffleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_TriggerAnnouncementsNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAnnouncementsNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).TriggerAnnouncementsNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/TriggerAnnouncementsNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).TriggerAnnouncementsNotification(ctx, req.(*TriggerAnnouncementsNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SpectatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpectatorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SpectatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SpectatorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SpectatorInfo(ctx, req.(*SpectatorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ResetSpectatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSpectatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ResetSpectatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ResetSpectatorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ResetSpectatorStatus(ctx, req.(*ResetSpectatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_MonitorModerationSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorModerationSettingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorModerationSettings(m, &jungleTVMonitorModerationSettingsServer{stream})
}

type JungleTV_MonitorModerationSettingsServer interface {
	Send(*ModerationSettingsOverview) error
	grpc.ServerStream
}

type jungleTVMonitorModerationSettingsServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorModerationSettingsServer) Send(m *ModerationSettingsOverview) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_SetOwnQueueEntryRemovalAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOwnQueueEntryRemovalAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetOwnQueueEntryRemovalAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetOwnQueueEntryRemovalAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetOwnQueueEntryRemovalAllowed(ctx, req.(*SetOwnQueueEntryRemovalAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetNewQueueEntriesAlwaysUnskippable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNewQueueEntriesAlwaysUnskippableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetNewQueueEntriesAlwaysUnskippable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetNewQueueEntriesAlwaysUnskippable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetNewQueueEntriesAlwaysUnskippable(ctx, req.(*SetNewQueueEntriesAlwaysUnskippableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetSkippingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSkippingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetSkippingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetSkippingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetSkippingEnabled(ctx, req.(*SetSkippingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JungleTV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jungletv.JungleTV",
	HandlerType: (*JungleTVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueueMedia",
			Handler:    _JungleTV_EnqueueMedia_Handler,
		},
		{
			MethodName: "RemoveOwnQueueEntry",
			Handler:    _JungleTV_RemoveOwnQueueEntry_Handler,
		},
		{
			MethodName: "RewardInfo",
			Handler:    _JungleTV_RewardInfo_Handler,
		},
		{
			MethodName: "SubmitActivityChallenge",
			Handler:    _JungleTV_SubmitActivityChallenge_Handler,
		},
		{
			MethodName: "ProduceSegchaChallenge",
			Handler:    _JungleTV_ProduceSegchaChallenge_Handler,
		},
		{
			MethodName: "SendChatMessage",
			Handler:    _JungleTV_SendChatMessage_Handler,
		},
		{
			MethodName: "UserPermissionLevel",
			Handler:    _JungleTV_UserPermissionLevel_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _JungleTV_GetDocument_Handler,
		},
		{
			MethodName: "SetChatNickname",
			Handler:    _JungleTV_SetChatNickname_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _JungleTV_Withdraw_Handler,
		},
		{
			MethodName: "Leaderboards",
			Handler:    _JungleTV_Leaderboards_Handler,
		},
		{
			MethodName: "RewardHistory",
			Handler:    _JungleTV_RewardHistory_Handler,
		},
		{
			MethodName: "WithdrawalHistory",
			Handler:    _JungleTV_WithdrawalHistory_Handler,
		},
		{
			MethodName: "OngoingRaffleInfo",
			Handler:    _JungleTV_OngoingRaffleInfo_Handler,
		},
		{
			MethodName: "ForciblyEnqueueTicket",
			Handler:    _JungleTV_ForciblyEnqueueTicket_Handler,
		},
		{
			MethodName: "RemoveQueueEntry",
			Handler:    _JungleTV_RemoveQueueEntry_Handler,
		},
		{
			MethodName: "RemoveChatMessage",
			Handler:    _JungleTV_RemoveChatMessage_Handler,
		},
		{
			MethodName: "SetChatSettings",
			Handler:    _JungleTV_SetChatSettings_Handler,
		},
		{
			MethodName: "SetVideoEnqueuingEnabled",
			Handler:    _JungleTV_SetVideoEnqueuingEnabled_Handler,
		},
		{
			MethodName: "UserBans",
			Handler:    _JungleTV_UserBans_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _JungleTV_BanUser_Handler,
		},
		{
			MethodName: "RemoveBan",
			Handler:    _JungleTV_RemoveBan_Handler,
		},
		{
			MethodName: "UserChatMessages",
			Handler:    _JungleTV_UserChatMessages_Handler,
		},
		{
			MethodName: "DisallowedVideos",
			Handler:    _JungleTV_DisallowedVideos_Handler,
		},
		{
			MethodName: "AddDisallowedVideo",
			Handler:    _JungleTV_AddDisallowedVideo_Handler,
		},
		{
			MethodName: "RemoveDisallowedVideo",
			Handler:    _JungleTV_RemoveDisallowedVideo_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _JungleTV_UpdateDocument_Handler,
		},
		{
			MethodName: "SetUserChatNickname",
			Handler:    _JungleTV_SetUserChatNickname_Handler,
		},
		{
			MethodName: "SetPricesMultiplier",
			Handler:    _JungleTV_SetPricesMultiplier_Handler,
		},
		{
			MethodName: "SetCrowdfundedSkippingEnabled",
			Handler:    _JungleTV_SetCrowdfundedSkippingEnabled_Handler,
		},
		{
			MethodName: "SetSkipPriceMultiplier",
			Handler:    _JungleTV_SetSkipPriceMultiplier_Handler,
		},
		{
			MethodName: "ConfirmRaffleWinner",
			Handler:    _JungleTV_ConfirmRaffleWinner_Handler,
		},
		{
			MethodName: "CompleteRaffle",
			Handler:    _JungleTV_CompleteRaffle_Handler,
		},
		{
			MethodName: "RedrawRaffle",
			Handler:    _JungleTV_RedrawRaffle_Handler,
		},
		{
			MethodName: "TriggerAnnouncementsNotification",
			Handler:    _JungleTV_TriggerAnnouncementsNotification_Handler,
		},
		{
			MethodName: "SpectatorInfo",
			Handler:    _JungleTV_SpectatorInfo_Handler,
		},
		{
			MethodName: "ResetSpectatorStatus",
			Handler:    _JungleTV_ResetSpectatorStatus_Handler,
		},
		{
			MethodName: "SetOwnQueueEntryRemovalAllowed",
			Handler:    _JungleTV_SetOwnQueueEntryRemovalAllowed_Handler,
		},
		{
			MethodName: "SetNewQueueEntriesAlwaysUnskippable",
			Handler:    _JungleTV_SetNewQueueEntriesAlwaysUnskippable_Handler,
		},
		{
			MethodName: "SetSkippingEnabled",
			Handler:    _JungleTV_SetSkippingEnabled_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignIn",
			Handler:       _JungleTV_SignIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorTicket",
			Handler:       _JungleTV_MonitorTicket_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeMedia",
			Handler:       _JungleTV_ConsumeMedia_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorQueue",
			Handler:       _JungleTV_MonitorQueue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorSkipAndTip",
			Handler:       _JungleTV_MonitorSkipAndTip_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeChat",
			Handler:       _JungleTV_ConsumeChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorModerationSettings",
			Handler:       _JungleTV_MonitorModerationSettings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jungletv.proto",
}
