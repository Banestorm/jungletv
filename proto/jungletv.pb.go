// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: jungletv.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnqueueMediaTicketStatus int32

const (
	EnqueueMediaTicketStatus_ACTIVE  EnqueueMediaTicketStatus = 0
	EnqueueMediaTicketStatus_PAID    EnqueueMediaTicketStatus = 1
	EnqueueMediaTicketStatus_EXPIRED EnqueueMediaTicketStatus = 2
)

// Enum value maps for EnqueueMediaTicketStatus.
var (
	EnqueueMediaTicketStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "PAID",
		2: "EXPIRED",
	}
	EnqueueMediaTicketStatus_value = map[string]int32{
		"ACTIVE":  0,
		"PAID":    1,
		"EXPIRED": 2,
	}
)

func (x EnqueueMediaTicketStatus) Enum() *EnqueueMediaTicketStatus {
	p := new(EnqueueMediaTicketStatus)
	*p = x
	return p
}

func (x EnqueueMediaTicketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnqueueMediaTicketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[0].Descriptor()
}

func (EnqueueMediaTicketStatus) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[0]
}

func (x EnqueueMediaTicketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnqueueMediaTicketStatus.Descriptor instead.
func (EnqueueMediaTicketStatus) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{0}
}

type SkipStatus int32

const (
	SkipStatus_SKIP_STATUS_ALLOWED               SkipStatus = 0
	SkipStatus_SKIP_STATUS_UNSKIPPABLE           SkipStatus = 1
	SkipStatus_SKIP_STATUS_END_OF_MEDIA_PERIOD   SkipStatus = 2
	SkipStatus_SKIP_STATUS_NO_MEDIA              SkipStatus = 3
	SkipStatus_SKIP_STATUS_UNAVAILABLE           SkipStatus = 4
	SkipStatus_SKIP_STATUS_DISABLED              SkipStatus = 5
	SkipStatus_SKIP_STATUS_START_OF_MEDIA_PERIOD SkipStatus = 6
)

// Enum value maps for SkipStatus.
var (
	SkipStatus_name = map[int32]string{
		0: "SKIP_STATUS_ALLOWED",
		1: "SKIP_STATUS_UNSKIPPABLE",
		2: "SKIP_STATUS_END_OF_MEDIA_PERIOD",
		3: "SKIP_STATUS_NO_MEDIA",
		4: "SKIP_STATUS_UNAVAILABLE",
		5: "SKIP_STATUS_DISABLED",
		6: "SKIP_STATUS_START_OF_MEDIA_PERIOD",
	}
	SkipStatus_value = map[string]int32{
		"SKIP_STATUS_ALLOWED":               0,
		"SKIP_STATUS_UNSKIPPABLE":           1,
		"SKIP_STATUS_END_OF_MEDIA_PERIOD":   2,
		"SKIP_STATUS_NO_MEDIA":              3,
		"SKIP_STATUS_UNAVAILABLE":           4,
		"SKIP_STATUS_DISABLED":              5,
		"SKIP_STATUS_START_OF_MEDIA_PERIOD": 6,
	}
)

func (x SkipStatus) Enum() *SkipStatus {
	p := new(SkipStatus)
	*p = x
	return p
}

func (x SkipStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkipStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[1].Descriptor()
}

func (SkipStatus) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[1]
}

func (x SkipStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkipStatus.Descriptor instead.
func (SkipStatus) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{1}
}

type UserRole int32

const (
	UserRole_MODERATOR               UserRole = 0
	UserRole_TIER_1_REQUESTER        UserRole = 1
	UserRole_TIER_2_REQUESTER        UserRole = 2
	UserRole_TIER_3_REQUESTER        UserRole = 3
	UserRole_CURRENT_ENTRY_REQUESTER UserRole = 4
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "MODERATOR",
		1: "TIER_1_REQUESTER",
		2: "TIER_2_REQUESTER",
		3: "TIER_3_REQUESTER",
		4: "CURRENT_ENTRY_REQUESTER",
	}
	UserRole_value = map[string]int32{
		"MODERATOR":               0,
		"TIER_1_REQUESTER":        1,
		"TIER_2_REQUESTER":        2,
		"TIER_3_REQUESTER":        3,
		"CURRENT_ENTRY_REQUESTER": 4,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[2].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[2]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{2}
}

type UserStatus int32

const (
	UserStatus_USER_STATUS_OFFLINE  UserStatus = 0
	UserStatus_USER_STATUS_WATCHING UserStatus = 1
	UserStatus_USER_STATUS_AWAY     UserStatus = 2
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "USER_STATUS_OFFLINE",
		1: "USER_STATUS_WATCHING",
		2: "USER_STATUS_AWAY",
	}
	UserStatus_value = map[string]int32{
		"USER_STATUS_OFFLINE":  0,
		"USER_STATUS_WATCHING": 1,
		"USER_STATUS_AWAY":     2,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[3].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[3]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{3}
}

type ForcedTicketEnqueueType int32

const (
	ForcedTicketEnqueueType_ENQUEUE   ForcedTicketEnqueueType = 0
	ForcedTicketEnqueueType_PLAY_NEXT ForcedTicketEnqueueType = 1
	ForcedTicketEnqueueType_PLAY_NOW  ForcedTicketEnqueueType = 2
)

// Enum value maps for ForcedTicketEnqueueType.
var (
	ForcedTicketEnqueueType_name = map[int32]string{
		0: "ENQUEUE",
		1: "PLAY_NEXT",
		2: "PLAY_NOW",
	}
	ForcedTicketEnqueueType_value = map[string]int32{
		"ENQUEUE":   0,
		"PLAY_NEXT": 1,
		"PLAY_NOW":  2,
	}
)

func (x ForcedTicketEnqueueType) Enum() *ForcedTicketEnqueueType {
	p := new(ForcedTicketEnqueueType)
	*p = x
	return p
}

func (x ForcedTicketEnqueueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForcedTicketEnqueueType) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[4].Descriptor()
}

func (ForcedTicketEnqueueType) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[4]
}

func (x ForcedTicketEnqueueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForcedTicketEnqueueType.Descriptor instead.
func (ForcedTicketEnqueueType) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{4}
}

type ChatDisabledReason int32

const (
	ChatDisabledReason_UNSPECIFIED           ChatDisabledReason = 0
	ChatDisabledReason_MODERATOR_NOT_PRESENT ChatDisabledReason = 1
)

// Enum value maps for ChatDisabledReason.
var (
	ChatDisabledReason_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MODERATOR_NOT_PRESENT",
	}
	ChatDisabledReason_value = map[string]int32{
		"UNSPECIFIED":           0,
		"MODERATOR_NOT_PRESENT": 1,
	}
)

func (x ChatDisabledReason) Enum() *ChatDisabledReason {
	p := new(ChatDisabledReason)
	*p = x
	return p
}

func (x ChatDisabledReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatDisabledReason) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[5].Descriptor()
}

func (ChatDisabledReason) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[5]
}

func (x ChatDisabledReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatDisabledReason.Descriptor instead.
func (ChatDisabledReason) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{5}
}

type AllowedVideoEnqueuingType int32

const (
	AllowedVideoEnqueuingType_DISABLED   AllowedVideoEnqueuingType = 0
	AllowedVideoEnqueuingType_STAFF_ONLY AllowedVideoEnqueuingType = 1
	AllowedVideoEnqueuingType_ENABLED    AllowedVideoEnqueuingType = 2
)

// Enum value maps for AllowedVideoEnqueuingType.
var (
	AllowedVideoEnqueuingType_name = map[int32]string{
		0: "DISABLED",
		1: "STAFF_ONLY",
		2: "ENABLED",
	}
	AllowedVideoEnqueuingType_value = map[string]int32{
		"DISABLED":   0,
		"STAFF_ONLY": 1,
		"ENABLED":    2,
	}
)

func (x AllowedVideoEnqueuingType) Enum() *AllowedVideoEnqueuingType {
	p := new(AllowedVideoEnqueuingType)
	*p = x
	return p
}

func (x AllowedVideoEnqueuingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedVideoEnqueuingType) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[6].Descriptor()
}

func (AllowedVideoEnqueuingType) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[6]
}

func (x AllowedVideoEnqueuingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedVideoEnqueuingType.Descriptor instead.
func (AllowedVideoEnqueuingType) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{6}
}

type PermissionLevel int32

const (
	PermissionLevel_UNAUTHENTICATED PermissionLevel = 0
	PermissionLevel_USER            PermissionLevel = 1
	PermissionLevel_ADMIN           PermissionLevel = 2
)

// Enum value maps for PermissionLevel.
var (
	PermissionLevel_name = map[int32]string{
		0: "UNAUTHENTICATED",
		1: "USER",
		2: "ADMIN",
	}
	PermissionLevel_value = map[string]int32{
		"UNAUTHENTICATED": 0,
		"USER":            1,
		"ADMIN":           2,
	}
)

func (x PermissionLevel) Enum() *PermissionLevel {
	p := new(PermissionLevel)
	*p = x
	return p
}

func (x PermissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[7].Descriptor()
}

func (PermissionLevel) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[7]
}

func (x PermissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionLevel.Descriptor instead.
func (PermissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{7}
}

type LeaderboardPeriod int32

const (
	LeaderboardPeriod_UNKNOWN_LEADERBOARD_PERIOD LeaderboardPeriod = 0
	LeaderboardPeriod_LAST_24_HOURS              LeaderboardPeriod = 1
	LeaderboardPeriod_LAST_7_DAYS                LeaderboardPeriod = 2
	LeaderboardPeriod_LAST_30_DAYS               LeaderboardPeriod = 3
)

// Enum value maps for LeaderboardPeriod.
var (
	LeaderboardPeriod_name = map[int32]string{
		0: "UNKNOWN_LEADERBOARD_PERIOD",
		1: "LAST_24_HOURS",
		2: "LAST_7_DAYS",
		3: "LAST_30_DAYS",
	}
	LeaderboardPeriod_value = map[string]int32{
		"UNKNOWN_LEADERBOARD_PERIOD": 0,
		"LAST_24_HOURS":              1,
		"LAST_7_DAYS":                2,
		"LAST_30_DAYS":               3,
	}
)

func (x LeaderboardPeriod) Enum() *LeaderboardPeriod {
	p := new(LeaderboardPeriod)
	*p = x
	return p
}

func (x LeaderboardPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaderboardPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[8].Descriptor()
}

func (LeaderboardPeriod) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[8]
}

func (x LeaderboardPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaderboardPeriod.Descriptor instead.
func (LeaderboardPeriod) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{8}
}

type ConnectionService int32

const (
	ConnectionService_UNKNOWN_CONNECTION_SERVICE ConnectionService = 0
	ConnectionService_CRYPTOMONKEYS              ConnectionService = 1
)

// Enum value maps for ConnectionService.
var (
	ConnectionService_name = map[int32]string{
		0: "UNKNOWN_CONNECTION_SERVICE",
		1: "CRYPTOMONKEYS",
	}
	ConnectionService_value = map[string]int32{
		"UNKNOWN_CONNECTION_SERVICE": 0,
		"CRYPTOMONKEYS":              1,
	}
)

func (x ConnectionService) Enum() *ConnectionService {
	p := new(ConnectionService)
	*p = x
	return p
}

func (x ConnectionService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionService) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[9].Descriptor()
}

func (ConnectionService) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[9]
}

func (x ConnectionService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionService.Descriptor instead.
func (ConnectionService) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{9}
}

type PaginationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PaginationParameters) Reset() {
	*x = PaginationParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationParameters) ProtoMessage() {}

func (x *PaginationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationParameters.ProtoReflect.Descriptor instead.
func (*PaginationParameters) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationParameters) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationParameters) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SignInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
}

func (x *SignInRequest) Reset() {
	*x = SignInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInRequest) ProtoMessage() {}

func (x *SignInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInRequest.ProtoReflect.Descriptor instead.
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{1}
}

func (x *SignInRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

type SignInProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//	*SignInProgress_Verification
	//	*SignInProgress_Response
	//	*SignInProgress_Expired
	//	*SignInProgress_AccountUnopened
	Step isSignInProgress_Step `protobuf_oneof:"step"`
}

func (x *SignInProgress) Reset() {
	*x = SignInProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInProgress) ProtoMessage() {}

func (x *SignInProgress) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInProgress.ProtoReflect.Descriptor instead.
func (*SignInProgress) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{2}
}

func (m *SignInProgress) GetStep() isSignInProgress_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *SignInProgress) GetVerification() *SignInVerification {
	if x, ok := x.GetStep().(*SignInProgress_Verification); ok {
		return x.Verification
	}
	return nil
}

func (x *SignInProgress) GetResponse() *SignInResponse {
	if x, ok := x.GetStep().(*SignInProgress_Response); ok {
		return x.Response
	}
	return nil
}

func (x *SignInProgress) GetExpired() *SignInVerificationExpired {
	if x, ok := x.GetStep().(*SignInProgress_Expired); ok {
		return x.Expired
	}
	return nil
}

func (x *SignInProgress) GetAccountUnopened() *SignInAccountUnopened {
	if x, ok := x.GetStep().(*SignInProgress_AccountUnopened); ok {
		return x.AccountUnopened
	}
	return nil
}

type isSignInProgress_Step interface {
	isSignInProgress_Step()
}

type SignInProgress_Verification struct {
	Verification *SignInVerification `protobuf:"bytes,1,opt,name=verification,proto3,oneof"`
}

type SignInProgress_Response struct {
	Response *SignInResponse `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

type SignInProgress_Expired struct {
	Expired *SignInVerificationExpired `protobuf:"bytes,3,opt,name=expired,proto3,oneof"`
}

type SignInProgress_AccountUnopened struct {
	AccountUnopened *SignInAccountUnopened `protobuf:"bytes,4,opt,name=account_unopened,json=accountUnopened,proto3,oneof"`
}

func (*SignInProgress_Verification) isSignInProgress_Step() {}

func (*SignInProgress_Response) isSignInProgress_Step() {}

func (*SignInProgress_Expired) isSignInProgress_Step() {}

func (*SignInProgress_AccountUnopened) isSignInProgress_Step() {}

type SignInVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationRepresentativeAddress string                 `protobuf:"bytes,1,opt,name=verification_representative_address,json=verificationRepresentativeAddress,proto3" json:"verification_representative_address,omitempty"`
	Expiration                        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SignInVerification) Reset() {
	*x = SignInVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInVerification) ProtoMessage() {}

func (x *SignInVerification) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInVerification.ProtoReflect.Descriptor instead.
func (*SignInVerification) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{3}
}

func (x *SignInVerification) GetVerificationRepresentativeAddress() string {
	if x != nil {
		return x.VerificationRepresentativeAddress
	}
	return ""
}

func (x *SignInVerification) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type SignInAccountUnopened struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignInAccountUnopened) Reset() {
	*x = SignInAccountUnopened{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInAccountUnopened) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInAccountUnopened) ProtoMessage() {}

func (x *SignInAccountUnopened) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInAccountUnopened.ProtoReflect.Descriptor instead.
func (*SignInAccountUnopened) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{4}
}

type SignInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken       string                 `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	TokenExpiration *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=token_expiration,json=tokenExpiration,proto3" json:"token_expiration,omitempty"`
}

func (x *SignInResponse) Reset() {
	*x = SignInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInResponse) ProtoMessage() {}

func (x *SignInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInResponse.ProtoReflect.Descriptor instead.
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{5}
}

func (x *SignInResponse) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *SignInResponse) GetTokenExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.TokenExpiration
	}
	return nil
}

type SignInVerificationExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignInVerificationExpired) Reset() {
	*x = SignInVerificationExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInVerificationExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInVerificationExpired) ProtoMessage() {}

func (x *SignInVerificationExpired) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInVerificationExpired.ProtoReflect.Descriptor instead.
func (*SignInVerificationExpired) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{6}
}

type EnqueueYouTubeVideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartOffset *durationpb.Duration `protobuf:"bytes,2,opt,name=start_offset,json=startOffset,proto3,oneof" json:"start_offset,omitempty"`
	EndOffset   *durationpb.Duration `protobuf:"bytes,3,opt,name=end_offset,json=endOffset,proto3,oneof" json:"end_offset,omitempty"`
}

func (x *EnqueueYouTubeVideoData) Reset() {
	*x = EnqueueYouTubeVideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueYouTubeVideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueYouTubeVideoData) ProtoMessage() {}

func (x *EnqueueYouTubeVideoData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueYouTubeVideoData.ProtoReflect.Descriptor instead.
func (*EnqueueYouTubeVideoData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{7}
}

func (x *EnqueueYouTubeVideoData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnqueueYouTubeVideoData) GetStartOffset() *durationpb.Duration {
	if x != nil {
		return x.StartOffset
	}
	return nil
}

func (x *EnqueueYouTubeVideoData) GetEndOffset() *durationpb.Duration {
	if x != nil {
		return x.EndOffset
	}
	return nil
}

// EnqueueStubData allows us to prepare and confirm that polymorphism is working properly
type EnqueueStubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnqueueStubData) Reset() {
	*x = EnqueueStubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueStubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueStubData) ProtoMessage() {}

func (x *EnqueueStubData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueStubData.ProtoReflect.Descriptor instead.
func (*EnqueueStubData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{8}
}

type EnqueueMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unskippable bool `protobuf:"varint,1,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*EnqueueMediaRequest_StubData
	//	*EnqueueMediaRequest_YoutubeVideoData
	MediaInfo isEnqueueMediaRequest_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *EnqueueMediaRequest) Reset() {
	*x = EnqueueMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaRequest) ProtoMessage() {}

func (x *EnqueueMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaRequest.ProtoReflect.Descriptor instead.
func (*EnqueueMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{9}
}

func (x *EnqueueMediaRequest) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (m *EnqueueMediaRequest) GetMediaInfo() isEnqueueMediaRequest_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *EnqueueMediaRequest) GetStubData() *EnqueueStubData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaRequest_StubData); ok {
		return x.StubData
	}
	return nil
}

func (x *EnqueueMediaRequest) GetYoutubeVideoData() *EnqueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaRequest_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

type isEnqueueMediaRequest_MediaInfo interface {
	isEnqueueMediaRequest_MediaInfo()
}

type EnqueueMediaRequest_StubData struct {
	StubData *EnqueueStubData `protobuf:"bytes,2,opt,name=stub_data,json=stubData,proto3,oneof"`
}

type EnqueueMediaRequest_YoutubeVideoData struct {
	YoutubeVideoData *EnqueueYouTubeVideoData `protobuf:"bytes,3,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

func (*EnqueueMediaRequest_StubData) isEnqueueMediaRequest_MediaInfo() {}

func (*EnqueueMediaRequest_YoutubeVideoData) isEnqueueMediaRequest_MediaInfo() {}

type EnqueueMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EnqueueResponse:
	//	*EnqueueMediaResponse_Ticket
	//	*EnqueueMediaResponse_Failure
	EnqueueResponse isEnqueueMediaResponse_EnqueueResponse `protobuf_oneof:"enqueue_response"`
}

func (x *EnqueueMediaResponse) Reset() {
	*x = EnqueueMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaResponse) ProtoMessage() {}

func (x *EnqueueMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaResponse.ProtoReflect.Descriptor instead.
func (*EnqueueMediaResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{10}
}

func (m *EnqueueMediaResponse) GetEnqueueResponse() isEnqueueMediaResponse_EnqueueResponse {
	if m != nil {
		return m.EnqueueResponse
	}
	return nil
}

func (x *EnqueueMediaResponse) GetTicket() *EnqueueMediaTicket {
	if x, ok := x.GetEnqueueResponse().(*EnqueueMediaResponse_Ticket); ok {
		return x.Ticket
	}
	return nil
}

func (x *EnqueueMediaResponse) GetFailure() *EnqueueMediaFailure {
	if x, ok := x.GetEnqueueResponse().(*EnqueueMediaResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

type isEnqueueMediaResponse_EnqueueResponse interface {
	isEnqueueMediaResponse_EnqueueResponse()
}

type EnqueueMediaResponse_Ticket struct {
	Ticket *EnqueueMediaTicket `protobuf:"bytes,1,opt,name=ticket,proto3,oneof"`
}

type EnqueueMediaResponse_Failure struct {
	Failure *EnqueueMediaFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*EnqueueMediaResponse_Ticket) isEnqueueMediaResponse_EnqueueResponse() {}

func (*EnqueueMediaResponse_Failure) isEnqueueMediaResponse_EnqueueResponse() {}

type EnqueueMediaFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureReason string `protobuf:"bytes,1,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *EnqueueMediaFailure) Reset() {
	*x = EnqueueMediaFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaFailure) ProtoMessage() {}

func (x *EnqueueMediaFailure) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaFailure.ProtoReflect.Descriptor instead.
func (*EnqueueMediaFailure) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{11}
}

func (x *EnqueueMediaFailure) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type EnqueueMediaTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                        EnqueueMediaTicketStatus `protobuf:"varint,2,opt,name=status,proto3,enum=jungletv.EnqueueMediaTicketStatus" json:"status,omitempty"`
	PaymentAddress                string                   `protobuf:"bytes,3,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	EnqueuePrice                  string                   `protobuf:"bytes,4,opt,name=enqueue_price,json=enqueuePrice,proto3" json:"enqueue_price,omitempty"`
	PlayNextPrice                 string                   `protobuf:"bytes,5,opt,name=play_next_price,json=playNextPrice,proto3" json:"play_next_price,omitempty"`
	PlayNowPrice                  string                   `protobuf:"bytes,6,opt,name=play_now_price,json=playNowPrice,proto3" json:"play_now_price,omitempty"`
	Expiration                    *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Unskippable                   bool                     `protobuf:"varint,8,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	CurrentlyPlayingIsUnskippable bool                     `protobuf:"varint,9,opt,name=currently_playing_is_unskippable,json=currentlyPlayingIsUnskippable,proto3" json:"currently_playing_is_unskippable,omitempty"`
	MediaLength                   *durationpb.Duration     `protobuf:"bytes,10,opt,name=media_length,json=mediaLength,proto3" json:"media_length,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*EnqueueMediaTicket_YoutubeVideoData
	MediaInfo isEnqueueMediaTicket_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *EnqueueMediaTicket) Reset() {
	*x = EnqueueMediaTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaTicket) ProtoMessage() {}

func (x *EnqueueMediaTicket) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaTicket.ProtoReflect.Descriptor instead.
func (*EnqueueMediaTicket) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{12}
}

func (x *EnqueueMediaTicket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnqueueMediaTicket) GetStatus() EnqueueMediaTicketStatus {
	if x != nil {
		return x.Status
	}
	return EnqueueMediaTicketStatus_ACTIVE
}

func (x *EnqueueMediaTicket) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

func (x *EnqueueMediaTicket) GetEnqueuePrice() string {
	if x != nil {
		return x.EnqueuePrice
	}
	return ""
}

func (x *EnqueueMediaTicket) GetPlayNextPrice() string {
	if x != nil {
		return x.PlayNextPrice
	}
	return ""
}

func (x *EnqueueMediaTicket) GetPlayNowPrice() string {
	if x != nil {
		return x.PlayNowPrice
	}
	return ""
}

func (x *EnqueueMediaTicket) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *EnqueueMediaTicket) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (x *EnqueueMediaTicket) GetCurrentlyPlayingIsUnskippable() bool {
	if x != nil {
		return x.CurrentlyPlayingIsUnskippable
	}
	return false
}

func (x *EnqueueMediaTicket) GetMediaLength() *durationpb.Duration {
	if x != nil {
		return x.MediaLength
	}
	return nil
}

func (m *EnqueueMediaTicket) GetMediaInfo() isEnqueueMediaTicket_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *EnqueueMediaTicket) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaTicket_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

type isEnqueueMediaTicket_MediaInfo interface {
	isEnqueueMediaTicket_MediaInfo()
}

type EnqueueMediaTicket_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,11,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

func (*EnqueueMediaTicket_YoutubeVideoData) isEnqueueMediaTicket_MediaInfo() {}

type MonitorTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
}

func (x *MonitorTicketRequest) Reset() {
	*x = MonitorTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorTicketRequest) ProtoMessage() {}

func (x *MonitorTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorTicketRequest.ProtoReflect.Descriptor instead.
func (*MonitorTicketRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{13}
}

func (x *MonitorTicketRequest) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

type RemoveOwnQueueEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveOwnQueueEntryRequest) Reset() {
	*x = RemoveOwnQueueEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOwnQueueEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOwnQueueEntryRequest) ProtoMessage() {}

func (x *RemoveOwnQueueEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOwnQueueEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveOwnQueueEntryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveOwnQueueEntryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveOwnQueueEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveOwnQueueEntryResponse) Reset() {
	*x = RemoveOwnQueueEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOwnQueueEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOwnQueueEntryResponse) ProtoMessage() {}

func (x *RemoveOwnQueueEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOwnQueueEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveOwnQueueEntryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{15}
}

type ConsumeMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsumeMediaRequest) Reset() {
	*x = ConsumeMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeMediaRequest) ProtoMessage() {}

func (x *ConsumeMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeMediaRequest.ProtoReflect.Descriptor instead.
func (*ConsumeMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{16}
}

// NowPlayingStubData allows us to prepare and confirm that polymorphism is working properly
type NowPlayingStubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NowPlayingStubData) Reset() {
	*x = NowPlayingStubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowPlayingStubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowPlayingStubData) ProtoMessage() {}

func (x *NowPlayingStubData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowPlayingStubData.ProtoReflect.Descriptor instead.
func (*NowPlayingStubData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{17}
}

type NowPlayingYouTubeVideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NowPlayingYouTubeVideoData) Reset() {
	*x = NowPlayingYouTubeVideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowPlayingYouTubeVideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowPlayingYouTubeVideoData) ProtoMessage() {}

func (x *NowPlayingYouTubeVideoData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowPlayingYouTubeVideoData.ProtoReflect.Descriptor instead.
func (*NowPlayingYouTubeVideoData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{18}
}

func (x *NowPlayingYouTubeVideoData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MediaConsumptionCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaPresent      bool                 `protobuf:"varint,1,opt,name=media_present,json=mediaPresent,proto3" json:"media_present,omitempty"`
	CurrentPosition   *durationpb.Duration `protobuf:"bytes,2,opt,name=current_position,json=currentPosition,proto3" json:"current_position,omitempty"`
	LiveBroadcast     bool                 `protobuf:"varint,3,opt,name=live_broadcast,json=liveBroadcast,proto3" json:"live_broadcast,omitempty"`
	RequestedBy       *User                `protobuf:"bytes,4,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	RequestCost       string               `protobuf:"bytes,5,opt,name=request_cost,json=requestCost,proto3" json:"request_cost,omitempty"`
	CurrentlyWatching uint32               `protobuf:"varint,6,opt,name=currently_watching,json=currentlyWatching,proto3" json:"currently_watching,omitempty"`
	Reward            *string              `protobuf:"bytes,7,opt,name=reward,proto3,oneof" json:"reward,omitempty"`
	RewardBalance     *string              `protobuf:"bytes,8,opt,name=reward_balance,json=rewardBalance,proto3,oneof" json:"reward_balance,omitempty"`
	ActivityChallenge *ActivityChallenge   `protobuf:"bytes,9,opt,name=activity_challenge,json=activityChallenge,proto3,oneof" json:"activity_challenge,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*MediaConsumptionCheckpoint_StubData
	//	*MediaConsumptionCheckpoint_YoutubeVideoData
	MediaInfo          isMediaConsumptionCheckpoint_MediaInfo `protobuf_oneof:"media_info"`
	LatestAnnouncement *uint32                                `protobuf:"varint,12,opt,name=latest_announcement,json=latestAnnouncement,proto3,oneof" json:"latest_announcement,omitempty"`
	HasChatMention     *bool                                  `protobuf:"varint,13,opt,name=has_chat_mention,json=hasChatMention,proto3,oneof" json:"has_chat_mention,omitempty"`
	MediaTitle         *string                                `protobuf:"bytes,14,opt,name=media_title,json=mediaTitle,proto3,oneof" json:"media_title,omitempty"`
}

func (x *MediaConsumptionCheckpoint) Reset() {
	*x = MediaConsumptionCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaConsumptionCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaConsumptionCheckpoint) ProtoMessage() {}

func (x *MediaConsumptionCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaConsumptionCheckpoint.ProtoReflect.Descriptor instead.
func (*MediaConsumptionCheckpoint) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{19}
}

func (x *MediaConsumptionCheckpoint) GetMediaPresent() bool {
	if x != nil {
		return x.MediaPresent
	}
	return false
}

func (x *MediaConsumptionCheckpoint) GetCurrentPosition() *durationpb.Duration {
	if x != nil {
		return x.CurrentPosition
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetLiveBroadcast() bool {
	if x != nil {
		return x.LiveBroadcast
	}
	return false
}

func (x *MediaConsumptionCheckpoint) GetRequestedBy() *User {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetRequestCost() string {
	if x != nil {
		return x.RequestCost
	}
	return ""
}

func (x *MediaConsumptionCheckpoint) GetCurrentlyWatching() uint32 {
	if x != nil {
		return x.CurrentlyWatching
	}
	return 0
}

func (x *MediaConsumptionCheckpoint) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MediaConsumptionCheckpoint) GetRewardBalance() string {
	if x != nil && x.RewardBalance != nil {
		return *x.RewardBalance
	}
	return ""
}

func (x *MediaConsumptionCheckpoint) GetActivityChallenge() *ActivityChallenge {
	if x != nil {
		return x.ActivityChallenge
	}
	return nil
}

func (m *MediaConsumptionCheckpoint) GetMediaInfo() isMediaConsumptionCheckpoint_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetStubData() *NowPlayingStubData {
	if x, ok := x.GetMediaInfo().(*MediaConsumptionCheckpoint_StubData); ok {
		return x.StubData
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetYoutubeVideoData() *NowPlayingYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*MediaConsumptionCheckpoint_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetLatestAnnouncement() uint32 {
	if x != nil && x.LatestAnnouncement != nil {
		return *x.LatestAnnouncement
	}
	return 0
}

func (x *MediaConsumptionCheckpoint) GetHasChatMention() bool {
	if x != nil && x.HasChatMention != nil {
		return *x.HasChatMention
	}
	return false
}

func (x *MediaConsumptionCheckpoint) GetMediaTitle() string {
	if x != nil && x.MediaTitle != nil {
		return *x.MediaTitle
	}
	return ""
}

type isMediaConsumptionCheckpoint_MediaInfo interface {
	isMediaConsumptionCheckpoint_MediaInfo()
}

type MediaConsumptionCheckpoint_StubData struct {
	StubData *NowPlayingStubData `protobuf:"bytes,10,opt,name=stub_data,json=stubData,proto3,oneof"`
}

type MediaConsumptionCheckpoint_YoutubeVideoData struct {
	YoutubeVideoData *NowPlayingYouTubeVideoData `protobuf:"bytes,11,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

func (*MediaConsumptionCheckpoint_StubData) isMediaConsumptionCheckpoint_MediaInfo() {}

func (*MediaConsumptionCheckpoint_YoutubeVideoData) isMediaConsumptionCheckpoint_MediaInfo() {}

type ActivityChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ChallengedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=challenged_at,json=challengedAt,proto3" json:"challenged_at,omitempty"`
}

func (x *ActivityChallenge) Reset() {
	*x = ActivityChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityChallenge) ProtoMessage() {}

func (x *ActivityChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityChallenge.ProtoReflect.Descriptor instead.
func (*ActivityChallenge) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{20}
}

func (x *ActivityChallenge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivityChallenge) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActivityChallenge) GetChallengedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChallengedAt
	}
	return nil
}

type MonitorQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorQueueRequest) Reset() {
	*x = MonitorQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorQueueRequest) ProtoMessage() {}

func (x *MonitorQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorQueueRequest.ProtoReflect.Descriptor instead.
func (*MonitorQueueRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{21}
}

type Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries                []*QueueEntry          `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	IsHeartbeat            bool                   `protobuf:"varint,2,opt,name=is_heartbeat,json=isHeartbeat,proto3" json:"is_heartbeat,omitempty"`
	OwnEntryRemovalEnabled bool                   `protobuf:"varint,3,opt,name=own_entry_removal_enabled,json=ownEntryRemovalEnabled,proto3" json:"own_entry_removal_enabled,omitempty"`
	InsertCursor           *string                `protobuf:"bytes,4,opt,name=insert_cursor,json=insertCursor,proto3,oneof" json:"insert_cursor,omitempty"`
	PlayingSince           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=playing_since,json=playingSince,proto3,oneof" json:"playing_since,omitempty"`
}

func (x *Queue) Reset() {
	*x = Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{22}
}

func (x *Queue) GetEntries() []*QueueEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *Queue) GetIsHeartbeat() bool {
	if x != nil {
		return x.IsHeartbeat
	}
	return false
}

func (x *Queue) GetOwnEntryRemovalEnabled() bool {
	if x != nil {
		return x.OwnEntryRemovalEnabled
	}
	return false
}

func (x *Queue) GetInsertCursor() string {
	if x != nil && x.InsertCursor != nil {
		return *x.InsertCursor
	}
	return ""
}

func (x *Queue) GetPlayingSince() *timestamppb.Timestamp {
	if x != nil {
		return x.PlayingSince
	}
	return nil
}

type QueueYouTubeVideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ThumbnailUrl  string `protobuf:"bytes,3,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	ChannelTitle  string `protobuf:"bytes,4,opt,name=channel_title,json=channelTitle,proto3" json:"channel_title,omitempty"`
	LiveBroadcast bool   `protobuf:"varint,5,opt,name=live_broadcast,json=liveBroadcast,proto3" json:"live_broadcast,omitempty"`
}

func (x *QueueYouTubeVideoData) Reset() {
	*x = QueueYouTubeVideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueYouTubeVideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueYouTubeVideoData) ProtoMessage() {}

func (x *QueueYouTubeVideoData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueYouTubeVideoData.ProtoReflect.Descriptor instead.
func (*QueueYouTubeVideoData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{23}
}

func (x *QueueYouTubeVideoData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetChannelTitle() string {
	if x != nil {
		return x.ChannelTitle
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetLiveBroadcast() bool {
	if x != nil {
		return x.LiveBroadcast
	}
	return false
}

type QueueEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestedBy *User                  `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	RequestCost string                 `protobuf:"bytes,3,opt,name=request_cost,json=requestCost,proto3" json:"request_cost,omitempty"`
	RequestedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	Length      *durationpb.Duration   `protobuf:"bytes,5,opt,name=length,proto3" json:"length,omitempty"`
	Offset      *durationpb.Duration   `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Unskippable bool                   `protobuf:"varint,7,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*QueueEntry_YoutubeVideoData
	MediaInfo isQueueEntry_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *QueueEntry) Reset() {
	*x = QueueEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueEntry) ProtoMessage() {}

func (x *QueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueEntry.ProtoReflect.Descriptor instead.
func (*QueueEntry) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{24}
}

func (x *QueueEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueEntry) GetRequestedBy() *User {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *QueueEntry) GetRequestCost() string {
	if x != nil {
		return x.RequestCost
	}
	return ""
}

func (x *QueueEntry) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *QueueEntry) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *QueueEntry) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *QueueEntry) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (m *QueueEntry) GetMediaInfo() isQueueEntry_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *QueueEntry) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*QueueEntry_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

type isQueueEntry_MediaInfo interface {
	isQueueEntry_MediaInfo()
}

type QueueEntry_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,8,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

func (*QueueEntry_YoutubeVideoData) isQueueEntry_MediaInfo() {}

type MonitorSkipAndTipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorSkipAndTipRequest) Reset() {
	*x = MonitorSkipAndTipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorSkipAndTipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorSkipAndTipRequest) ProtoMessage() {}

func (x *MonitorSkipAndTipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorSkipAndTipRequest.ProtoReflect.Descriptor instead.
func (*MonitorSkipAndTipRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{25}
}

type SkipAndTipStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipStatus    SkipStatus `protobuf:"varint,1,opt,name=skip_status,json=skipStatus,proto3,enum=jungletv.SkipStatus" json:"skip_status,omitempty"`
	SkipAddress   string     `protobuf:"bytes,2,opt,name=skip_address,json=skipAddress,proto3" json:"skip_address,omitempty"`
	SkipBalance   string     `protobuf:"bytes,3,opt,name=skip_balance,json=skipBalance,proto3" json:"skip_balance,omitempty"`
	SkipThreshold string     `protobuf:"bytes,4,opt,name=skip_threshold,json=skipThreshold,proto3" json:"skip_threshold,omitempty"`
	RainAddress   string     `protobuf:"bytes,5,opt,name=rain_address,json=rainAddress,proto3" json:"rain_address,omitempty"`
	RainBalance   string     `protobuf:"bytes,6,opt,name=rain_balance,json=rainBalance,proto3" json:"rain_balance,omitempty"`
}

func (x *SkipAndTipStatus) Reset() {
	*x = SkipAndTipStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipAndTipStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipAndTipStatus) ProtoMessage() {}

func (x *SkipAndTipStatus) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipAndTipStatus.ProtoReflect.Descriptor instead.
func (*SkipAndTipStatus) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{26}
}

func (x *SkipAndTipStatus) GetSkipStatus() SkipStatus {
	if x != nil {
		return x.SkipStatus
	}
	return SkipStatus_SKIP_STATUS_ALLOWED
}

func (x *SkipAndTipStatus) GetSkipAddress() string {
	if x != nil {
		return x.SkipAddress
	}
	return ""
}

func (x *SkipAndTipStatus) GetSkipBalance() string {
	if x != nil {
		return x.SkipBalance
	}
	return ""
}

func (x *SkipAndTipStatus) GetSkipThreshold() string {
	if x != nil {
		return x.SkipThreshold
	}
	return ""
}

func (x *SkipAndTipStatus) GetRainAddress() string {
	if x != nil {
		return x.RainAddress
	}
	return ""
}

func (x *SkipAndTipStatus) GetRainBalance() string {
	if x != nil {
		return x.RainBalance
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Roles    []UserRole `protobuf:"varint,2,rep,packed,name=roles,proto3,enum=jungletv.UserRole" json:"roles,omitempty"`
	Nickname *string    `protobuf:"bytes,3,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Status   UserStatus `protobuf:"varint,4,opt,name=status,proto3,enum=jungletv.UserStatus" json:"status,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{27}
}

func (x *User) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *User) GetRoles() []UserRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *User) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *User) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_OFFLINE
}

type RewardInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RewardInfoRequest) Reset() {
	*x = RewardInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfoRequest) ProtoMessage() {}

func (x *RewardInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfoRequest.ProtoReflect.Descriptor instead.
func (*RewardInfoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{28}
}

type RewardInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress            string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	RewardBalance             string `protobuf:"bytes,2,opt,name=reward_balance,json=rewardBalance,proto3" json:"reward_balance,omitempty"`
	WithdrawalPending         bool   `protobuf:"varint,3,opt,name=withdrawal_pending,json=withdrawalPending,proto3" json:"withdrawal_pending,omitempty"`
	BadRepresentative         bool   `protobuf:"varint,4,opt,name=bad_representative,json=badRepresentative,proto3" json:"bad_representative,omitempty"`
	WithdrawalPositionInQueue *int32 `protobuf:"varint,5,opt,name=withdrawal_position_in_queue,json=withdrawalPositionInQueue,proto3,oneof" json:"withdrawal_position_in_queue,omitempty"`
	WithdrawalsInQueue        *int32 `protobuf:"varint,6,opt,name=withdrawals_in_queue,json=withdrawalsInQueue,proto3,oneof" json:"withdrawals_in_queue,omitempty"`
}

func (x *RewardInfoResponse) Reset() {
	*x = RewardInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfoResponse) ProtoMessage() {}

func (x *RewardInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfoResponse.ProtoReflect.Descriptor instead.
func (*RewardInfoResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{29}
}

func (x *RewardInfoResponse) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *RewardInfoResponse) GetRewardBalance() string {
	if x != nil {
		return x.RewardBalance
	}
	return ""
}

func (x *RewardInfoResponse) GetWithdrawalPending() bool {
	if x != nil {
		return x.WithdrawalPending
	}
	return false
}

func (x *RewardInfoResponse) GetBadRepresentative() bool {
	if x != nil {
		return x.BadRepresentative
	}
	return false
}

func (x *RewardInfoResponse) GetWithdrawalPositionInQueue() int32 {
	if x != nil && x.WithdrawalPositionInQueue != nil {
		return *x.WithdrawalPositionInQueue
	}
	return 0
}

func (x *RewardInfoResponse) GetWithdrawalsInQueue() int32 {
	if x != nil && x.WithdrawalsInQueue != nil {
		return *x.WithdrawalsInQueue
	}
	return 0
}

type RemoveQueueEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveQueueEntryRequest) Reset() {
	*x = RemoveQueueEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQueueEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQueueEntryRequest) ProtoMessage() {}

func (x *RemoveQueueEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQueueEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveQueueEntryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{30}
}

func (x *RemoveQueueEntryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveQueueEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveQueueEntryResponse) Reset() {
	*x = RemoveQueueEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQueueEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQueueEntryResponse) ProtoMessage() {}

func (x *RemoveQueueEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQueueEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveQueueEntryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{31}
}

type ForciblyEnqueueTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnqueueType ForcedTicketEnqueueType `protobuf:"varint,2,opt,name=enqueue_type,json=enqueueType,proto3,enum=jungletv.ForcedTicketEnqueueType" json:"enqueue_type,omitempty"`
}

func (x *ForciblyEnqueueTicketRequest) Reset() {
	*x = ForciblyEnqueueTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForciblyEnqueueTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForciblyEnqueueTicketRequest) ProtoMessage() {}

func (x *ForciblyEnqueueTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForciblyEnqueueTicketRequest.ProtoReflect.Descriptor instead.
func (*ForciblyEnqueueTicketRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{32}
}

func (x *ForciblyEnqueueTicketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForciblyEnqueueTicketRequest) GetEnqueueType() ForcedTicketEnqueueType {
	if x != nil {
		return x.EnqueueType
	}
	return ForcedTicketEnqueueType_ENQUEUE
}

type ForciblyEnqueueTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForciblyEnqueueTicketResponse) Reset() {
	*x = ForciblyEnqueueTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForciblyEnqueueTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForciblyEnqueueTicketResponse) ProtoMessage() {}

func (x *ForciblyEnqueueTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForciblyEnqueueTicketResponse.ProtoReflect.Descriptor instead.
func (*ForciblyEnqueueTicketResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{33}
}

type SubmitActivityChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge       string `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	CaptchaResponse string `protobuf:"bytes,2,opt,name=captcha_response,json=captchaResponse,proto3" json:"captcha_response,omitempty"`
	Trusted         bool   `protobuf:"varint,3,opt,name=trusted,proto3" json:"trusted,omitempty"`
	ClientVersion   string `protobuf:"bytes,4,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *SubmitActivityChallengeRequest) Reset() {
	*x = SubmitActivityChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitActivityChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitActivityChallengeRequest) ProtoMessage() {}

func (x *SubmitActivityChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitActivityChallengeRequest.ProtoReflect.Descriptor instead.
func (*SubmitActivityChallengeRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{34}
}

func (x *SubmitActivityChallengeRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *SubmitActivityChallengeRequest) GetCaptchaResponse() string {
	if x != nil {
		return x.CaptchaResponse
	}
	return ""
}

func (x *SubmitActivityChallengeRequest) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

func (x *SubmitActivityChallengeRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type SubmitActivityChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitActivityChallengeResponse) Reset() {
	*x = SubmitActivityChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitActivityChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitActivityChallengeResponse) ProtoMessage() {}

func (x *SubmitActivityChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitActivityChallengeResponse.ProtoReflect.Descriptor instead.
func (*SubmitActivityChallengeResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{35}
}

type ConsumeChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialHistorySize uint32 `protobuf:"varint,1,opt,name=initial_history_size,json=initialHistorySize,proto3" json:"initial_history_size,omitempty"`
}

func (x *ConsumeChatRequest) Reset() {
	*x = ConsumeChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeChatRequest) ProtoMessage() {}

func (x *ConsumeChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeChatRequest.ProtoReflect.Descriptor instead.
func (*ConsumeChatRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{36}
}

func (x *ConsumeChatRequest) GetInitialHistorySize() uint32 {
	if x != nil {
		return x.InitialHistorySize
	}
	return 0
}

type ChatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*ChatUpdate_Disabled
	//	*ChatUpdate_Enabled
	//	*ChatUpdate_MessageCreated
	//	*ChatUpdate_MessageDeleted
	//	*ChatUpdate_Heartbeat
	//	*ChatUpdate_BlockedUserCreated
	//	*ChatUpdate_BlockedUserDeleted
	Event isChatUpdate_Event `protobuf_oneof:"event"`
}

func (x *ChatUpdate) Reset() {
	*x = ChatUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUpdate) ProtoMessage() {}

func (x *ChatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUpdate.ProtoReflect.Descriptor instead.
func (*ChatUpdate) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{37}
}

func (m *ChatUpdate) GetEvent() isChatUpdate_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ChatUpdate) GetDisabled() *ChatDisabledEvent {
	if x, ok := x.GetEvent().(*ChatUpdate_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (x *ChatUpdate) GetEnabled() *ChatEnabledEvent {
	if x, ok := x.GetEvent().(*ChatUpdate_Enabled); ok {
		return x.Enabled
	}
	return nil
}

func (x *ChatUpdate) GetMessageCreated() *ChatMessageCreatedEvent {
	if x, ok := x.GetEvent().(*ChatUpdate_MessageCreated); ok {
		return x.MessageCreated
	}
	return nil
}

func (x *ChatUpdate) GetMessageDeleted() *ChatMessageDeletedEvent {
	if x, ok := x.GetEvent().(*ChatUpdate_MessageDeleted); ok {
		return x.MessageDeleted
	}
	return nil
}

func (x *ChatUpdate) GetHeartbeat() *ChatHeartbeatEvent {
	if x, ok := x.GetEvent().(*ChatUpdate_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *ChatUpdate) GetBlockedUserCreated() *ChatBlockedUserCreatedEvent {
	if x, ok := x.GetEvent().(*ChatUpdate_BlockedUserCreated); ok {
		return x.BlockedUserCreated
	}
	return nil
}

func (x *ChatUpdate) GetBlockedUserDeleted() *ChatBlockedUserDeletedEvent {
	if x, ok := x.GetEvent().(*ChatUpdate_BlockedUserDeleted); ok {
		return x.BlockedUserDeleted
	}
	return nil
}

type isChatUpdate_Event interface {
	isChatUpdate_Event()
}

type ChatUpdate_Disabled struct {
	Disabled *ChatDisabledEvent `protobuf:"bytes,1,opt,name=disabled,proto3,oneof"`
}

type ChatUpdate_Enabled struct {
	Enabled *ChatEnabledEvent `protobuf:"bytes,2,opt,name=enabled,proto3,oneof"`
}

type ChatUpdate_MessageCreated struct {
	MessageCreated *ChatMessageCreatedEvent `protobuf:"bytes,3,opt,name=message_created,json=messageCreated,proto3,oneof"`
}

type ChatUpdate_MessageDeleted struct {
	MessageDeleted *ChatMessageDeletedEvent `protobuf:"bytes,4,opt,name=message_deleted,json=messageDeleted,proto3,oneof"`
}

type ChatUpdate_Heartbeat struct {
	Heartbeat *ChatHeartbeatEvent `protobuf:"bytes,5,opt,name=heartbeat,proto3,oneof"`
}

type ChatUpdate_BlockedUserCreated struct {
	BlockedUserCreated *ChatBlockedUserCreatedEvent `protobuf:"bytes,6,opt,name=blocked_user_created,json=blockedUserCreated,proto3,oneof"`
}

type ChatUpdate_BlockedUserDeleted struct {
	BlockedUserDeleted *ChatBlockedUserDeletedEvent `protobuf:"bytes,7,opt,name=blocked_user_deleted,json=blockedUserDeleted,proto3,oneof"`
}

func (*ChatUpdate_Disabled) isChatUpdate_Event() {}

func (*ChatUpdate_Enabled) isChatUpdate_Event() {}

func (*ChatUpdate_MessageCreated) isChatUpdate_Event() {}

func (*ChatUpdate_MessageDeleted) isChatUpdate_Event() {}

func (*ChatUpdate_Heartbeat) isChatUpdate_Event() {}

func (*ChatUpdate_BlockedUserCreated) isChatUpdate_Event() {}

func (*ChatUpdate_BlockedUserDeleted) isChatUpdate_Event() {}

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Types that are assignable to Message:
	//	*ChatMessage_UserMessage
	//	*ChatMessage_SystemMessage
	Message   isChatMessage_Message `protobuf_oneof:"message"`
	Reference *ChatMessage          `protobuf:"bytes,5,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{38}
}

func (x *ChatMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (m *ChatMessage) GetMessage() isChatMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ChatMessage) GetUserMessage() *UserChatMessage {
	if x, ok := x.GetMessage().(*ChatMessage_UserMessage); ok {
		return x.UserMessage
	}
	return nil
}

func (x *ChatMessage) GetSystemMessage() *SystemChatMessage {
	if x, ok := x.GetMessage().(*ChatMessage_SystemMessage); ok {
		return x.SystemMessage
	}
	return nil
}

func (x *ChatMessage) GetReference() *ChatMessage {
	if x != nil {
		return x.Reference
	}
	return nil
}

type isChatMessage_Message interface {
	isChatMessage_Message()
}

type ChatMessage_UserMessage struct {
	UserMessage *UserChatMessage `protobuf:"bytes,3,opt,name=user_message,json=userMessage,proto3,oneof"`
}

type ChatMessage_SystemMessage struct {
	SystemMessage *SystemChatMessage `protobuf:"bytes,4,opt,name=system_message,json=systemMessage,proto3,oneof"`
}

func (*ChatMessage_UserMessage) isChatMessage_Message() {}

func (*ChatMessage_SystemMessage) isChatMessage_Message() {}

type UserChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author  *User  `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UserChatMessage) Reset() {
	*x = UserChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatMessage) ProtoMessage() {}

func (x *UserChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatMessage.ProtoReflect.Descriptor instead.
func (*UserChatMessage) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{39}
}

func (x *UserChatMessage) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *UserChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SystemChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SystemChatMessage) Reset() {
	*x = SystemChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemChatMessage) ProtoMessage() {}

func (x *SystemChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemChatMessage.ProtoReflect.Descriptor instead.
func (*SystemChatMessage) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{40}
}

func (x *SystemChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ChatDisabledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason ChatDisabledReason `protobuf:"varint,1,opt,name=reason,proto3,enum=jungletv.ChatDisabledReason" json:"reason,omitempty"`
}

func (x *ChatDisabledEvent) Reset() {
	*x = ChatDisabledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatDisabledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatDisabledEvent) ProtoMessage() {}

func (x *ChatDisabledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatDisabledEvent.ProtoReflect.Descriptor instead.
func (*ChatDisabledEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{41}
}

func (x *ChatDisabledEvent) GetReason() ChatDisabledReason {
	if x != nil {
		return x.Reason
	}
	return ChatDisabledReason_UNSPECIFIED
}

type ChatEnabledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChatEnabledEvent) Reset() {
	*x = ChatEnabledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEnabledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEnabledEvent) ProtoMessage() {}

func (x *ChatEnabledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEnabledEvent.ProtoReflect.Descriptor instead.
func (*ChatEnabledEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{42}
}

type ChatMessageCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *ChatMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChatMessageCreatedEvent) Reset() {
	*x = ChatMessageCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageCreatedEvent) ProtoMessage() {}

func (x *ChatMessageCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageCreatedEvent.ProtoReflect.Descriptor instead.
func (*ChatMessageCreatedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{43}
}

func (x *ChatMessageCreatedEvent) GetMessage() *ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChatMessageDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChatMessageDeletedEvent) Reset() {
	*x = ChatMessageDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageDeletedEvent) ProtoMessage() {}

func (x *ChatMessageDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageDeletedEvent.ProtoReflect.Descriptor instead.
func (*ChatMessageDeletedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{44}
}

func (x *ChatMessageDeletedEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ChatHeartbeatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *ChatHeartbeatEvent) Reset() {
	*x = ChatHeartbeatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHeartbeatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHeartbeatEvent) ProtoMessage() {}

func (x *ChatHeartbeatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHeartbeatEvent.ProtoReflect.Descriptor instead.
func (*ChatHeartbeatEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{45}
}

func (x *ChatHeartbeatEvent) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type ChatBlockedUserCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedUserAddress string `protobuf:"bytes,1,opt,name=blocked_user_address,json=blockedUserAddress,proto3" json:"blocked_user_address,omitempty"`
}

func (x *ChatBlockedUserCreatedEvent) Reset() {
	*x = ChatBlockedUserCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBlockedUserCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBlockedUserCreatedEvent) ProtoMessage() {}

func (x *ChatBlockedUserCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBlockedUserCreatedEvent.ProtoReflect.Descriptor instead.
func (*ChatBlockedUserCreatedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{46}
}

func (x *ChatBlockedUserCreatedEvent) GetBlockedUserAddress() string {
	if x != nil {
		return x.BlockedUserAddress
	}
	return ""
}

type ChatBlockedUserDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedUserAddress string `protobuf:"bytes,1,opt,name=blocked_user_address,json=blockedUserAddress,proto3" json:"blocked_user_address,omitempty"`
}

func (x *ChatBlockedUserDeletedEvent) Reset() {
	*x = ChatBlockedUserDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBlockedUserDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBlockedUserDeletedEvent) ProtoMessage() {}

func (x *ChatBlockedUserDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBlockedUserDeletedEvent.ProtoReflect.Descriptor instead.
func (*ChatBlockedUserDeletedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{47}
}

func (x *ChatBlockedUserDeletedEvent) GetBlockedUserAddress() string {
	if x != nil {
		return x.BlockedUserAddress
	}
	return ""
}

type SendChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content          string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Trusted          bool   `protobuf:"varint,2,opt,name=trusted,proto3" json:"trusted,omitempty"`
	ReplyReferenceId *int64 `protobuf:"varint,3,opt,name=reply_reference_id,json=replyReferenceId,proto3,oneof" json:"reply_reference_id,omitempty"`
}

func (x *SendChatMessageRequest) Reset() {
	*x = SendChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageRequest) ProtoMessage() {}

func (x *SendChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageRequest.ProtoReflect.Descriptor instead.
func (*SendChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{48}
}

func (x *SendChatMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendChatMessageRequest) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

func (x *SendChatMessageRequest) GetReplyReferenceId() int64 {
	if x != nil && x.ReplyReferenceId != nil {
		return *x.ReplyReferenceId
	}
	return 0
}

type SendChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SendChatMessageResponse) Reset() {
	*x = SendChatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageResponse) ProtoMessage() {}

func (x *SendChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageResponse.ProtoReflect.Descriptor instead.
func (*SendChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{49}
}

func (x *SendChatMessageResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveChatMessageRequest) Reset() {
	*x = RemoveChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatMessageRequest) ProtoMessage() {}

func (x *RemoveChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatMessageRequest.ProtoReflect.Descriptor instead.
func (*RemoveChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{50}
}

func (x *RemoveChatMessageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveChatMessageResponse) Reset() {
	*x = RemoveChatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatMessageResponse) ProtoMessage() {}

func (x *RemoveChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatMessageResponse.ProtoReflect.Descriptor instead.
func (*RemoveChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{51}
}

type SetChatSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Slowmode bool `protobuf:"varint,2,opt,name=slowmode,proto3" json:"slowmode,omitempty"`
}

func (x *SetChatSettingsRequest) Reset() {
	*x = SetChatSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatSettingsRequest) ProtoMessage() {}

func (x *SetChatSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatSettingsRequest.ProtoReflect.Descriptor instead.
func (*SetChatSettingsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{52}
}

func (x *SetChatSettingsRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SetChatSettingsRequest) GetSlowmode() bool {
	if x != nil {
		return x.Slowmode
	}
	return false
}

type SetChatSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetChatSettingsResponse) Reset() {
	*x = SetChatSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatSettingsResponse) ProtoMessage() {}

func (x *SetChatSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatSettingsResponse.ProtoReflect.Descriptor instead.
func (*SetChatSettingsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{53}
}

type BanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RemoteAddress   string               `protobuf:"bytes,2,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	ChatBanned      bool                 `protobuf:"varint,3,opt,name=chat_banned,json=chatBanned,proto3" json:"chat_banned,omitempty"`
	EnqueuingBanned bool                 `protobuf:"varint,4,opt,name=enqueuing_banned,json=enqueuingBanned,proto3" json:"enqueuing_banned,omitempty"`
	RewardsBanned   bool                 `protobuf:"varint,5,opt,name=rewards_banned,json=rewardsBanned,proto3" json:"rewards_banned,omitempty"`
	Reason          string               `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	Duration        *durationpb.Duration `protobuf:"bytes,7,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *BanUserRequest) Reset() {
	*x = BanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserRequest) ProtoMessage() {}

func (x *BanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserRequest.ProtoReflect.Descriptor instead.
func (*BanUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{54}
}

func (x *BanUserRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BanUserRequest) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *BanUserRequest) GetChatBanned() bool {
	if x != nil {
		return x.ChatBanned
	}
	return false
}

func (x *BanUserRequest) GetEnqueuingBanned() bool {
	if x != nil {
		return x.EnqueuingBanned
	}
	return false
}

func (x *BanUserRequest) GetRewardsBanned() bool {
	if x != nil {
		return x.RewardsBanned
	}
	return false
}

func (x *BanUserRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BanUserRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type BanUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanIds []string `protobuf:"bytes,1,rep,name=ban_ids,json=banIds,proto3" json:"ban_ids,omitempty"`
}

func (x *BanUserResponse) Reset() {
	*x = BanUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserResponse) ProtoMessage() {}

func (x *BanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserResponse.ProtoReflect.Descriptor instead.
func (*BanUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{55}
}

func (x *BanUserResponse) GetBanIds() []string {
	if x != nil {
		return x.BanIds
	}
	return nil
}

type RemoveBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanId  string `protobuf:"bytes,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RemoveBanRequest) Reset() {
	*x = RemoveBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBanRequest) ProtoMessage() {}

func (x *RemoveBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBanRequest.ProtoReflect.Descriptor instead.
func (*RemoveBanRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{56}
}

func (x *RemoveBanRequest) GetBanId() string {
	if x != nil {
		return x.BanId
	}
	return ""
}

func (x *RemoveBanRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RemoveBanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBanResponse) Reset() {
	*x = RemoveBanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBanResponse) ProtoMessage() {}

func (x *RemoveBanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBanResponse.ProtoReflect.Descriptor instead.
func (*RemoveBanResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{57}
}

type UserBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanId           string                 `protobuf:"bytes,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	BannedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=banned_at,json=bannedAt,proto3" json:"banned_at,omitempty"`
	BannedUntil     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=banned_until,json=bannedUntil,proto3,oneof" json:"banned_until,omitempty"`
	Address         string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	RemoteAddress   string                 `protobuf:"bytes,5,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	ChatBanned      bool                   `protobuf:"varint,6,opt,name=chat_banned,json=chatBanned,proto3" json:"chat_banned,omitempty"`
	EnqueuingBanned bool                   `protobuf:"varint,7,opt,name=enqueuing_banned,json=enqueuingBanned,proto3" json:"enqueuing_banned,omitempty"`
	RewardsBanned   bool                   `protobuf:"varint,8,opt,name=rewards_banned,json=rewardsBanned,proto3" json:"rewards_banned,omitempty"`
	Reason          string                 `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	UnbanReason     *string                `protobuf:"bytes,10,opt,name=unban_reason,json=unbanReason,proto3,oneof" json:"unban_reason,omitempty"`
	BannedBy        *User                  `protobuf:"bytes,11,opt,name=banned_by,json=bannedBy,proto3" json:"banned_by,omitempty"`
}

func (x *UserBan) Reset() {
	*x = UserBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBan) ProtoMessage() {}

func (x *UserBan) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBan.ProtoReflect.Descriptor instead.
func (*UserBan) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{58}
}

func (x *UserBan) GetBanId() string {
	if x != nil {
		return x.BanId
	}
	return ""
}

func (x *UserBan) GetBannedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BannedAt
	}
	return nil
}

func (x *UserBan) GetBannedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.BannedUntil
	}
	return nil
}

func (x *UserBan) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserBan) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *UserBan) GetChatBanned() bool {
	if x != nil {
		return x.ChatBanned
	}
	return false
}

func (x *UserBan) GetEnqueuingBanned() bool {
	if x != nil {
		return x.EnqueuingBanned
	}
	return false
}

func (x *UserBan) GetRewardsBanned() bool {
	if x != nil {
		return x.RewardsBanned
	}
	return false
}

func (x *UserBan) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UserBan) GetUnbanReason() string {
	if x != nil && x.UnbanReason != nil {
		return *x.UnbanReason
	}
	return ""
}

func (x *UserBan) GetBannedBy() *User {
	if x != nil {
		return x.BannedBy
	}
	return nil
}

type UserBansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	ActiveOnly       bool                  `protobuf:"varint,3,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
}

func (x *UserBansRequest) Reset() {
	*x = UserBansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBansRequest) ProtoMessage() {}

func (x *UserBansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBansRequest.ProtoReflect.Descriptor instead.
func (*UserBansRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{59}
}

func (x *UserBansRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *UserBansRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *UserBansRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type UserBansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserBans []*UserBan `protobuf:"bytes,1,rep,name=user_bans,json=userBans,proto3" json:"user_bans,omitempty"`
	Offset   uint64     `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total    uint64     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserBansResponse) Reset() {
	*x = UserBansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBansResponse) ProtoMessage() {}

func (x *UserBansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBansResponse.ProtoReflect.Descriptor instead.
func (*UserBansResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{60}
}

func (x *UserBansResponse) GetUserBans() []*UserBan {
	if x != nil {
		return x.UserBans
	}
	return nil
}

func (x *UserBansResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserBansResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SetVideoEnqueuingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed AllowedVideoEnqueuingType `protobuf:"varint,1,opt,name=allowed,proto3,enum=jungletv.AllowedVideoEnqueuingType" json:"allowed,omitempty"`
}

func (x *SetVideoEnqueuingEnabledRequest) Reset() {
	*x = SetVideoEnqueuingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVideoEnqueuingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoEnqueuingEnabledRequest) ProtoMessage() {}

func (x *SetVideoEnqueuingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoEnqueuingEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetVideoEnqueuingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{61}
}

func (x *SetVideoEnqueuingEnabledRequest) GetAllowed() AllowedVideoEnqueuingType {
	if x != nil {
		return x.Allowed
	}
	return AllowedVideoEnqueuingType_DISABLED
}

type SetVideoEnqueuingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetVideoEnqueuingEnabledResponse) Reset() {
	*x = SetVideoEnqueuingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVideoEnqueuingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoEnqueuingEnabledResponse) ProtoMessage() {}

func (x *SetVideoEnqueuingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoEnqueuingEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetVideoEnqueuingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{62}
}

type UserChatMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	NumMessages uint32 `protobuf:"varint,2,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
}

func (x *UserChatMessagesRequest) Reset() {
	*x = UserChatMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatMessagesRequest) ProtoMessage() {}

func (x *UserChatMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatMessagesRequest.ProtoReflect.Descriptor instead.
func (*UserChatMessagesRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{63}
}

func (x *UserChatMessagesRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserChatMessagesRequest) GetNumMessages() uint32 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

type UserChatMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *UserChatMessagesResponse) Reset() {
	*x = UserChatMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatMessagesResponse) ProtoMessage() {}

func (x *UserChatMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatMessagesResponse.ProtoReflect.Descriptor instead.
func (*UserChatMessagesResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{64}
}

func (x *UserChatMessagesResponse) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type UserPermissionLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserPermissionLevelRequest) Reset() {
	*x = UserPermissionLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermissionLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionLevelRequest) ProtoMessage() {}

func (x *UserPermissionLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionLevelRequest.ProtoReflect.Descriptor instead.
func (*UserPermissionLevelRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{65}
}

type UserPermissionLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionLevel PermissionLevel `protobuf:"varint,1,opt,name=permission_level,json=permissionLevel,proto3,enum=jungletv.PermissionLevel" json:"permission_level,omitempty"`
}

func (x *UserPermissionLevelResponse) Reset() {
	*x = UserPermissionLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermissionLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionLevelResponse) ProtoMessage() {}

func (x *UserPermissionLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionLevelResponse.ProtoReflect.Descriptor instead.
func (*UserPermissionLevelResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{66}
}

func (x *UserPermissionLevelResponse) GetPermissionLevel() PermissionLevel {
	if x != nil {
		return x.PermissionLevel
	}
	return PermissionLevel_UNAUTHENTICATED
}

type DisallowedVideosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
}

func (x *DisallowedVideosRequest) Reset() {
	*x = DisallowedVideosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedVideosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedVideosRequest) ProtoMessage() {}

func (x *DisallowedVideosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedVideosRequest.ProtoReflect.Descriptor instead.
func (*DisallowedVideosRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{67}
}

func (x *DisallowedVideosRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *DisallowedVideosRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type DisallowedVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisallowedBy string                 `protobuf:"bytes,2,opt,name=disallowed_by,json=disallowedBy,proto3" json:"disallowed_by,omitempty"`
	DisallowedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=disallowed_at,json=disallowedAt,proto3" json:"disallowed_at,omitempty"`
	YtVideoId    string                 `protobuf:"bytes,4,opt,name=yt_video_id,json=ytVideoId,proto3" json:"yt_video_id,omitempty"`
	YtVideoTitle string                 `protobuf:"bytes,5,opt,name=yt_video_title,json=ytVideoTitle,proto3" json:"yt_video_title,omitempty"`
}

func (x *DisallowedVideo) Reset() {
	*x = DisallowedVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedVideo) ProtoMessage() {}

func (x *DisallowedVideo) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedVideo.ProtoReflect.Descriptor instead.
func (*DisallowedVideo) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{68}
}

func (x *DisallowedVideo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DisallowedVideo) GetDisallowedBy() string {
	if x != nil {
		return x.DisallowedBy
	}
	return ""
}

func (x *DisallowedVideo) GetDisallowedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DisallowedAt
	}
	return nil
}

func (x *DisallowedVideo) GetYtVideoId() string {
	if x != nil {
		return x.YtVideoId
	}
	return ""
}

func (x *DisallowedVideo) GetYtVideoTitle() string {
	if x != nil {
		return x.YtVideoTitle
	}
	return ""
}

type DisallowedVideosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisallowedVideos []*DisallowedVideo `protobuf:"bytes,1,rep,name=disallowed_videos,json=disallowedVideos,proto3" json:"disallowed_videos,omitempty"`
	Offset           uint64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total            uint64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DisallowedVideosResponse) Reset() {
	*x = DisallowedVideosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedVideosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedVideosResponse) ProtoMessage() {}

func (x *DisallowedVideosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedVideosResponse.ProtoReflect.Descriptor instead.
func (*DisallowedVideosResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{69}
}

func (x *DisallowedVideosResponse) GetDisallowedVideos() []*DisallowedVideo {
	if x != nil {
		return x.DisallowedVideos
	}
	return nil
}

func (x *DisallowedVideosResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DisallowedVideosResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AddDisallowedVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YtVideoId string `protobuf:"bytes,1,opt,name=yt_video_id,json=ytVideoId,proto3" json:"yt_video_id,omitempty"`
}

func (x *AddDisallowedVideoRequest) Reset() {
	*x = AddDisallowedVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDisallowedVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDisallowedVideoRequest) ProtoMessage() {}

func (x *AddDisallowedVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDisallowedVideoRequest.ProtoReflect.Descriptor instead.
func (*AddDisallowedVideoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{70}
}

func (x *AddDisallowedVideoRequest) GetYtVideoId() string {
	if x != nil {
		return x.YtVideoId
	}
	return ""
}

type AddDisallowedVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddDisallowedVideoResponse) Reset() {
	*x = AddDisallowedVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDisallowedVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDisallowedVideoResponse) ProtoMessage() {}

func (x *AddDisallowedVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDisallowedVideoResponse.ProtoReflect.Descriptor instead.
func (*AddDisallowedVideoResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{71}
}

func (x *AddDisallowedVideoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveDisallowedVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveDisallowedVideoRequest) Reset() {
	*x = RemoveDisallowedVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDisallowedVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDisallowedVideoRequest) ProtoMessage() {}

func (x *RemoveDisallowedVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDisallowedVideoRequest.ProtoReflect.Descriptor instead.
func (*RemoveDisallowedVideoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{72}
}

func (x *RemoveDisallowedVideoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveDisallowedVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDisallowedVideoResponse) Reset() {
	*x = RemoveDisallowedVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDisallowedVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDisallowedVideoResponse) ProtoMessage() {}

func (x *RemoveDisallowedVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDisallowedVideoResponse.ProtoReflect.Descriptor instead.
func (*RemoveDisallowedVideoResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{73}
}

type GetDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{74}
}

func (x *GetDocumentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format  string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{75}
}

func (x *Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Document) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type UpdateDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDocumentResponse) Reset() {
	*x = UpdateDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocumentResponse) ProtoMessage() {}

func (x *UpdateDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocumentResponse.ProtoReflect.Descriptor instead.
func (*UpdateDocumentResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{76}
}

type SetChatNicknameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *SetChatNicknameRequest) Reset() {
	*x = SetChatNicknameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatNicknameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatNicknameRequest) ProtoMessage() {}

func (x *SetChatNicknameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatNicknameRequest.ProtoReflect.Descriptor instead.
func (*SetChatNicknameRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{77}
}

func (x *SetChatNicknameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type SetChatNicknameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetChatNicknameResponse) Reset() {
	*x = SetChatNicknameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatNicknameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatNicknameResponse) ProtoMessage() {}

func (x *SetChatNicknameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatNicknameResponse.ProtoReflect.Descriptor instead.
func (*SetChatNicknameResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{78}
}

type SetUserChatNicknameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *SetUserChatNicknameRequest) Reset() {
	*x = SetUserChatNicknameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserChatNicknameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserChatNicknameRequest) ProtoMessage() {}

func (x *SetUserChatNicknameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserChatNicknameRequest.ProtoReflect.Descriptor instead.
func (*SetUserChatNicknameRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{79}
}

func (x *SetUserChatNicknameRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SetUserChatNicknameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type SetUserChatNicknameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserChatNicknameResponse) Reset() {
	*x = SetUserChatNicknameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserChatNicknameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserChatNicknameResponse) ProtoMessage() {}

func (x *SetUserChatNicknameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserChatNicknameResponse.ProtoReflect.Descriptor instead.
func (*SetUserChatNicknameResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{80}
}

type SetPricesMultiplierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiplier int32 `protobuf:"varint,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *SetPricesMultiplierRequest) Reset() {
	*x = SetPricesMultiplierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPricesMultiplierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPricesMultiplierRequest) ProtoMessage() {}

func (x *SetPricesMultiplierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPricesMultiplierRequest.ProtoReflect.Descriptor instead.
func (*SetPricesMultiplierRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{81}
}

func (x *SetPricesMultiplierRequest) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type SetPricesMultiplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPricesMultiplierResponse) Reset() {
	*x = SetPricesMultiplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPricesMultiplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPricesMultiplierResponse) ProtoMessage() {}

func (x *SetPricesMultiplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPricesMultiplierResponse.ProtoReflect.Descriptor instead.
func (*SetPricesMultiplierResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{82}
}

type SetMinimumPricesMultiplierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiplier int32 `protobuf:"varint,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *SetMinimumPricesMultiplierRequest) Reset() {
	*x = SetMinimumPricesMultiplierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinimumPricesMultiplierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinimumPricesMultiplierRequest) ProtoMessage() {}

func (x *SetMinimumPricesMultiplierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinimumPricesMultiplierRequest.ProtoReflect.Descriptor instead.
func (*SetMinimumPricesMultiplierRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{83}
}

func (x *SetMinimumPricesMultiplierRequest) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type SetMinimumPricesMultiplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMinimumPricesMultiplierResponse) Reset() {
	*x = SetMinimumPricesMultiplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinimumPricesMultiplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinimumPricesMultiplierResponse) ProtoMessage() {}

func (x *SetMinimumPricesMultiplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinimumPricesMultiplierResponse.ProtoReflect.Descriptor instead.
func (*SetMinimumPricesMultiplierResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{84}
}

type WithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithdrawRequest) Reset() {
	*x = WithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRequest) ProtoMessage() {}

func (x *WithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawRequest.ProtoReflect.Descriptor instead.
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{85}
}

type WithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithdrawResponse) Reset() {
	*x = WithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawResponse) ProtoMessage() {}

func (x *WithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawResponse.ProtoReflect.Descriptor instead.
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{86}
}

type LeaderboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period LeaderboardPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=jungletv.LeaderboardPeriod" json:"period,omitempty"`
}

func (x *LeaderboardsRequest) Reset() {
	*x = LeaderboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardsRequest) ProtoMessage() {}

func (x *LeaderboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardsRequest.ProtoReflect.Descriptor instead.
func (*LeaderboardsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{87}
}

func (x *LeaderboardsRequest) GetPeriod() LeaderboardPeriod {
	if x != nil {
		return x.Period
	}
	return LeaderboardPeriod_UNKNOWN_LEADERBOARD_PERIOD
}

type LeaderboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboards []*Leaderboard `protobuf:"bytes,1,rep,name=leaderboards,proto3" json:"leaderboards,omitempty"`
}

func (x *LeaderboardsResponse) Reset() {
	*x = LeaderboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardsResponse) ProtoMessage() {}

func (x *LeaderboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardsResponse.ProtoReflect.Descriptor instead.
func (*LeaderboardsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{88}
}

func (x *LeaderboardsResponse) GetLeaderboards() []*Leaderboard {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

type Leaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ValueTitles []string          `protobuf:"bytes,2,rep,name=value_titles,json=valueTitles,proto3" json:"value_titles,omitempty"`
	Rows        []*LeaderboardRow `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Leaderboard) Reset() {
	*x = Leaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaderboard) ProtoMessage() {}

func (x *Leaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaderboard.ProtoReflect.Descriptor instead.
func (*Leaderboard) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{89}
}

func (x *Leaderboard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Leaderboard) GetValueTitles() []string {
	if x != nil {
		return x.ValueTitles
	}
	return nil
}

func (x *Leaderboard) GetRows() []*LeaderboardRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type LeaderboardRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowNum   uint32              `protobuf:"varint,1,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Position uint32              `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Address  string              `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Nickname *string             `protobuf:"bytes,4,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Values   []*LeaderboardValue `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LeaderboardRow) Reset() {
	*x = LeaderboardRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardRow) ProtoMessage() {}

func (x *LeaderboardRow) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardRow.ProtoReflect.Descriptor instead.
func (*LeaderboardRow) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{90}
}

func (x *LeaderboardRow) GetRowNum() uint32 {
	if x != nil {
		return x.RowNum
	}
	return 0
}

func (x *LeaderboardRow) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *LeaderboardRow) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LeaderboardRow) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *LeaderboardRow) GetValues() []*LeaderboardValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type LeaderboardValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*LeaderboardValue_Amount
	Value isLeaderboardValue_Value `protobuf_oneof:"value"`
}

func (x *LeaderboardValue) Reset() {
	*x = LeaderboardValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardValue) ProtoMessage() {}

func (x *LeaderboardValue) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardValue.ProtoReflect.Descriptor instead.
func (*LeaderboardValue) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{91}
}

func (m *LeaderboardValue) GetValue() isLeaderboardValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LeaderboardValue) GetAmount() string {
	if x, ok := x.GetValue().(*LeaderboardValue_Amount); ok {
		return x.Amount
	}
	return ""
}

type isLeaderboardValue_Value interface {
	isLeaderboardValue_Value()
}

type LeaderboardValue_Amount struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3,oneof"`
}

func (*LeaderboardValue_Amount) isLeaderboardValue_Value() {}

type RewardHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *RewardHistoryRequest) Reset() {
	*x = RewardHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardHistoryRequest) ProtoMessage() {}

func (x *RewardHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardHistoryRequest.ProtoReflect.Descriptor instead.
func (*RewardHistoryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{92}
}

func (x *RewardHistoryRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type ReceivedReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RewardsAddress string                 `protobuf:"bytes,2,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	Amount         string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	ReceivedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	MediaId        string                 `protobuf:"bytes,5,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*ReceivedReward_YoutubeVideoData
	MediaInfo isReceivedReward_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *ReceivedReward) Reset() {
	*x = ReceivedReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedReward) ProtoMessage() {}

func (x *ReceivedReward) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedReward.ProtoReflect.Descriptor instead.
func (*ReceivedReward) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{93}
}

func (x *ReceivedReward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReceivedReward) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *ReceivedReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ReceivedReward) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *ReceivedReward) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (m *ReceivedReward) GetMediaInfo() isReceivedReward_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *ReceivedReward) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*ReceivedReward_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

type isReceivedReward_MediaInfo interface {
	isReceivedReward_MediaInfo()
}

type ReceivedReward_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,6,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

func (*ReceivedReward_YoutubeVideoData) isReceivedReward_MediaInfo() {}

type RewardHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedRewards []*ReceivedReward `protobuf:"bytes,1,rep,name=received_rewards,json=receivedRewards,proto3" json:"received_rewards,omitempty"`
	Offset          uint64            `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total           uint64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RewardHistoryResponse) Reset() {
	*x = RewardHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardHistoryResponse) ProtoMessage() {}

func (x *RewardHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardHistoryResponse.ProtoReflect.Descriptor instead.
func (*RewardHistoryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{94}
}

func (x *RewardHistoryResponse) GetReceivedRewards() []*ReceivedReward {
	if x != nil {
		return x.ReceivedRewards
	}
	return nil
}

func (x *RewardHistoryResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RewardHistoryResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type WithdrawalHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *WithdrawalHistoryRequest) Reset() {
	*x = WithdrawalHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalHistoryRequest) ProtoMessage() {}

func (x *WithdrawalHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalHistoryRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalHistoryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{95}
}

func (x *WithdrawalHistoryRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash         string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	RewardsAddress string                 `protobuf:"bytes,2,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	Amount         string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	StartedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{96}
}

func (x *Withdrawal) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Withdrawal) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *Withdrawal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Withdrawal) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Withdrawal) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type WithdrawalHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Withdrawals []*Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	Offset      uint64        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total       uint64        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *WithdrawalHistoryResponse) Reset() {
	*x = WithdrawalHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalHistoryResponse) ProtoMessage() {}

func (x *WithdrawalHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalHistoryResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalHistoryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{97}
}

func (x *WithdrawalHistoryResponse) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *WithdrawalHistoryResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WithdrawalHistoryResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SetCrowdfundedSkippingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetCrowdfundedSkippingEnabledRequest) Reset() {
	*x = SetCrowdfundedSkippingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCrowdfundedSkippingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCrowdfundedSkippingEnabledRequest) ProtoMessage() {}

func (x *SetCrowdfundedSkippingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCrowdfundedSkippingEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetCrowdfundedSkippingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{98}
}

func (x *SetCrowdfundedSkippingEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetCrowdfundedSkippingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCrowdfundedSkippingEnabledResponse) Reset() {
	*x = SetCrowdfundedSkippingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCrowdfundedSkippingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCrowdfundedSkippingEnabledResponse) ProtoMessage() {}

func (x *SetCrowdfundedSkippingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCrowdfundedSkippingEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetCrowdfundedSkippingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{99}
}

type SetSkipPriceMultiplierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiplier int32 `protobuf:"varint,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *SetSkipPriceMultiplierRequest) Reset() {
	*x = SetSkipPriceMultiplierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkipPriceMultiplierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkipPriceMultiplierRequest) ProtoMessage() {}

func (x *SetSkipPriceMultiplierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkipPriceMultiplierRequest.ProtoReflect.Descriptor instead.
func (*SetSkipPriceMultiplierRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{100}
}

func (x *SetSkipPriceMultiplierRequest) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type SetSkipPriceMultiplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSkipPriceMultiplierResponse) Reset() {
	*x = SetSkipPriceMultiplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkipPriceMultiplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkipPriceMultiplierResponse) ProtoMessage() {}

func (x *SetSkipPriceMultiplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkipPriceMultiplierResponse.ProtoReflect.Descriptor instead.
func (*SetSkipPriceMultiplierResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{101}
}

type ProduceSegchaChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProduceSegchaChallengeRequest) Reset() {
	*x = ProduceSegchaChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSegchaChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSegchaChallengeRequest) ProtoMessage() {}

func (x *ProduceSegchaChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSegchaChallengeRequest.ProtoReflect.Descriptor instead.
func (*ProduceSegchaChallengeRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{102}
}

type ProduceSegchaChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Steps       []*SegchaChallengeStep `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *ProduceSegchaChallengeResponse) Reset() {
	*x = ProduceSegchaChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSegchaChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSegchaChallengeResponse) ProtoMessage() {}

func (x *ProduceSegchaChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSegchaChallengeResponse.ProtoReflect.Descriptor instead.
func (*ProduceSegchaChallengeResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{103}
}

func (x *ProduceSegchaChallengeResponse) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *ProduceSegchaChallengeResponse) GetSteps() []*SegchaChallengeStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type SegchaChallengeStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *SegchaChallengeStep) Reset() {
	*x = SegchaChallengeStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegchaChallengeStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegchaChallengeStep) ProtoMessage() {}

func (x *SegchaChallengeStep) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegchaChallengeStep.ProtoReflect.Descriptor instead.
func (*SegchaChallengeStep) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{104}
}

func (x *SegchaChallengeStep) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type ConfirmRaffleWinnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId string `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
}

func (x *ConfirmRaffleWinnerRequest) Reset() {
	*x = ConfirmRaffleWinnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRaffleWinnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRaffleWinnerRequest) ProtoMessage() {}

func (x *ConfirmRaffleWinnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRaffleWinnerRequest.ProtoReflect.Descriptor instead.
func (*ConfirmRaffleWinnerRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{105}
}

func (x *ConfirmRaffleWinnerRequest) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

type ConfirmRaffleWinnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmRaffleWinnerResponse) Reset() {
	*x = ConfirmRaffleWinnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRaffleWinnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRaffleWinnerResponse) ProtoMessage() {}

func (x *ConfirmRaffleWinnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRaffleWinnerResponse.ProtoReflect.Descriptor instead.
func (*ConfirmRaffleWinnerResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{106}
}

type CompleteRaffleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId    string `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
	PrizeTxHash string `protobuf:"bytes,2,opt,name=prize_tx_hash,json=prizeTxHash,proto3" json:"prize_tx_hash,omitempty"`
}

func (x *CompleteRaffleRequest) Reset() {
	*x = CompleteRaffleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteRaffleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteRaffleRequest) ProtoMessage() {}

func (x *CompleteRaffleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteRaffleRequest.ProtoReflect.Descriptor instead.
func (*CompleteRaffleRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{107}
}

func (x *CompleteRaffleRequest) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

func (x *CompleteRaffleRequest) GetPrizeTxHash() string {
	if x != nil {
		return x.PrizeTxHash
	}
	return ""
}

type CompleteRaffleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteRaffleResponse) Reset() {
	*x = CompleteRaffleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteRaffleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteRaffleResponse) ProtoMessage() {}

func (x *CompleteRaffleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteRaffleResponse.ProtoReflect.Descriptor instead.
func (*CompleteRaffleResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{108}
}

type RedrawRaffleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId string `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RedrawRaffleRequest) Reset() {
	*x = RedrawRaffleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedrawRaffleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedrawRaffleRequest) ProtoMessage() {}

func (x *RedrawRaffleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedrawRaffleRequest.ProtoReflect.Descriptor instead.
func (*RedrawRaffleRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{109}
}

func (x *RedrawRaffleRequest) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

func (x *RedrawRaffleRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RedrawRaffleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RedrawRaffleResponse) Reset() {
	*x = RedrawRaffleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedrawRaffleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedrawRaffleResponse) ProtoMessage() {}

func (x *RedrawRaffleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedrawRaffleResponse.ProtoReflect.Descriptor instead.
func (*RedrawRaffleResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{110}
}

type OngoingRaffleInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OngoingRaffleInfoRequest) Reset() {
	*x = OngoingRaffleInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OngoingRaffleInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OngoingRaffleInfoRequest) ProtoMessage() {}

func (x *OngoingRaffleInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OngoingRaffleInfoRequest.ProtoReflect.Descriptor instead.
func (*OngoingRaffleInfoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{111}
}

type OngoingRaffleInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleInfo *OngoingRaffleInfo `protobuf:"bytes,1,opt,name=raffle_info,json=raffleInfo,proto3,oneof" json:"raffle_info,omitempty"`
}

func (x *OngoingRaffleInfoResponse) Reset() {
	*x = OngoingRaffleInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OngoingRaffleInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OngoingRaffleInfoResponse) ProtoMessage() {}

func (x *OngoingRaffleInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OngoingRaffleInfoResponse.ProtoReflect.Descriptor instead.
func (*OngoingRaffleInfoResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{112}
}

func (x *OngoingRaffleInfoResponse) GetRaffleInfo() *OngoingRaffleInfo {
	if x != nil {
		return x.RaffleInfo
	}
	return nil
}

type OngoingRaffleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId     string                 `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
	EntriesUrl   string                 `protobuf:"bytes,2,opt,name=entries_url,json=entriesUrl,proto3" json:"entries_url,omitempty"`
	InfoUrl      string                 `protobuf:"bytes,3,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
	PeriodStart  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	TotalTickets uint32                 `protobuf:"varint,6,opt,name=total_tickets,json=totalTickets,proto3" json:"total_tickets,omitempty"`
	UserTickets  *uint32                `protobuf:"varint,7,opt,name=user_tickets,json=userTickets,proto3,oneof" json:"user_tickets,omitempty"`
}

func (x *OngoingRaffleInfo) Reset() {
	*x = OngoingRaffleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OngoingRaffleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OngoingRaffleInfo) ProtoMessage() {}

func (x *OngoingRaffleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OngoingRaffleInfo.ProtoReflect.Descriptor instead.
func (*OngoingRaffleInfo) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{113}
}

func (x *OngoingRaffleInfo) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

func (x *OngoingRaffleInfo) GetEntriesUrl() string {
	if x != nil {
		return x.EntriesUrl
	}
	return ""
}

func (x *OngoingRaffleInfo) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

func (x *OngoingRaffleInfo) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *OngoingRaffleInfo) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *OngoingRaffleInfo) GetTotalTickets() uint32 {
	if x != nil {
		return x.TotalTickets
	}
	return 0
}

func (x *OngoingRaffleInfo) GetUserTickets() uint32 {
	if x != nil && x.UserTickets != nil {
		return *x.UserTickets
	}
	return 0
}

type TriggerAnnouncementsNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerAnnouncementsNotificationRequest) Reset() {
	*x = TriggerAnnouncementsNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAnnouncementsNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAnnouncementsNotificationRequest) ProtoMessage() {}

func (x *TriggerAnnouncementsNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAnnouncementsNotificationRequest.ProtoReflect.Descriptor instead.
func (*TriggerAnnouncementsNotificationRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{114}
}

type TriggerAnnouncementsNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerAnnouncementsNotificationResponse) Reset() {
	*x = TriggerAnnouncementsNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAnnouncementsNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAnnouncementsNotificationResponse) ProtoMessage() {}

func (x *TriggerAnnouncementsNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAnnouncementsNotificationResponse.ProtoReflect.Descriptor instead.
func (*TriggerAnnouncementsNotificationResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{115}
}

type SpectatorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
}

func (x *SpectatorInfoRequest) Reset() {
	*x = SpectatorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectatorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectatorInfoRequest) ProtoMessage() {}

func (x *SpectatorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectatorInfoRequest.ProtoReflect.Descriptor instead.
func (*SpectatorInfoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{116}
}

func (x *SpectatorInfoRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

type Spectator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress                     string                 `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	NumConnections                     uint32                 `protobuf:"varint,2,opt,name=num_connections,json=numConnections,proto3" json:"num_connections,omitempty"`
	NumSpectatorsWithSameRemoteAddress uint32                 `protobuf:"varint,3,opt,name=num_spectators_with_same_remote_address,json=numSpectatorsWithSameRemoteAddress,proto3" json:"num_spectators_with_same_remote_address,omitempty"`
	WatchingSince                      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=watching_since,json=watchingSince,proto3" json:"watching_since,omitempty"`
	RemoteAddressCanReceiveRewards     bool                   `protobuf:"varint,5,opt,name=remote_address_can_receive_rewards,json=remoteAddressCanReceiveRewards,proto3" json:"remote_address_can_receive_rewards,omitempty"`
	Legitimate                         bool                   `protobuf:"varint,6,opt,name=legitimate,proto3" json:"legitimate,omitempty"`
	NotLegitimateSince                 *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=not_legitimate_since,json=notLegitimateSince,proto3,oneof" json:"not_legitimate_since,omitempty"`
	StoppedWatchingAt                  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=stopped_watching_at,json=stoppedWatchingAt,proto3,oneof" json:"stopped_watching_at,omitempty"`
	ActivityChallenge                  *ActivityChallenge     `protobuf:"bytes,9,opt,name=activity_challenge,json=activityChallenge,proto3,oneof" json:"activity_challenge,omitempty"`
}

func (x *Spectator) Reset() {
	*x = Spectator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spectator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spectator) ProtoMessage() {}

func (x *Spectator) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spectator.ProtoReflect.Descriptor instead.
func (*Spectator) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{117}
}

func (x *Spectator) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *Spectator) GetNumConnections() uint32 {
	if x != nil {
		return x.NumConnections
	}
	return 0
}

func (x *Spectator) GetNumSpectatorsWithSameRemoteAddress() uint32 {
	if x != nil {
		return x.NumSpectatorsWithSameRemoteAddress
	}
	return 0
}

func (x *Spectator) GetWatchingSince() *timestamppb.Timestamp {
	if x != nil {
		return x.WatchingSince
	}
	return nil
}

func (x *Spectator) GetRemoteAddressCanReceiveRewards() bool {
	if x != nil {
		return x.RemoteAddressCanReceiveRewards
	}
	return false
}

func (x *Spectator) GetLegitimate() bool {
	if x != nil {
		return x.Legitimate
	}
	return false
}

func (x *Spectator) GetNotLegitimateSince() *timestamppb.Timestamp {
	if x != nil {
		return x.NotLegitimateSince
	}
	return nil
}

func (x *Spectator) GetStoppedWatchingAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StoppedWatchingAt
	}
	return nil
}

func (x *Spectator) GetActivityChallenge() *ActivityChallenge {
	if x != nil {
		return x.ActivityChallenge
	}
	return nil
}

type ResetSpectatorStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
}

func (x *ResetSpectatorStatusRequest) Reset() {
	*x = ResetSpectatorStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSpectatorStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSpectatorStatusRequest) ProtoMessage() {}

func (x *ResetSpectatorStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSpectatorStatusRequest.ProtoReflect.Descriptor instead.
func (*ResetSpectatorStatusRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{118}
}

func (x *ResetSpectatorStatusRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

type ResetSpectatorStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSpectatorStatusResponse) Reset() {
	*x = ResetSpectatorStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSpectatorStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSpectatorStatusResponse) ProtoMessage() {}

func (x *ResetSpectatorStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSpectatorStatusResponse.ProtoReflect.Descriptor instead.
func (*ResetSpectatorStatusResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{119}
}

type MonitorModerationSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorModerationSettingsRequest) Reset() {
	*x = MonitorModerationSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorModerationSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorModerationSettingsRequest) ProtoMessage() {}

func (x *MonitorModerationSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorModerationSettingsRequest.ProtoReflect.Descriptor instead.
func (*MonitorModerationSettingsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{120}
}

type ModerationSettingsOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedVideoEnqueuing               AllowedVideoEnqueuingType `protobuf:"varint,1,opt,name=allowed_video_enqueuing,json=allowedVideoEnqueuing,proto3,enum=jungletv.AllowedVideoEnqueuingType" json:"allowed_video_enqueuing,omitempty"`
	EnqueuingPricesMultiplier           int32                     `protobuf:"varint,2,opt,name=enqueuing_prices_multiplier,json=enqueuingPricesMultiplier,proto3" json:"enqueuing_prices_multiplier,omitempty"`
	CrowdfundedSkippingEnabled          bool                      `protobuf:"varint,3,opt,name=crowdfunded_skipping_enabled,json=crowdfundedSkippingEnabled,proto3" json:"crowdfunded_skipping_enabled,omitempty"`
	CrowdfundedSkippingPricesMultiplier int32                     `protobuf:"varint,4,opt,name=crowdfunded_skipping_prices_multiplier,json=crowdfundedSkippingPricesMultiplier,proto3" json:"crowdfunded_skipping_prices_multiplier,omitempty"`
	NewEntriesAlwaysUnskippable         bool                      `protobuf:"varint,5,opt,name=new_entries_always_unskippable,json=newEntriesAlwaysUnskippable,proto3" json:"new_entries_always_unskippable,omitempty"`
	OwnEntryRemovalEnabled              bool                      `protobuf:"varint,6,opt,name=own_entry_removal_enabled,json=ownEntryRemovalEnabled,proto3" json:"own_entry_removal_enabled,omitempty"`
	AllSkippingEnabled                  bool                      `protobuf:"varint,7,opt,name=all_skipping_enabled,json=allSkippingEnabled,proto3" json:"all_skipping_enabled,omitempty"`
	QueueInsertCursor                   *string                   `protobuf:"bytes,8,opt,name=queue_insert_cursor,json=queueInsertCursor,proto3,oneof" json:"queue_insert_cursor,omitempty"`
	MinimumPricesMultiplier             int32                     `protobuf:"varint,9,opt,name=minimum_prices_multiplier,json=minimumPricesMultiplier,proto3" json:"minimum_prices_multiplier,omitempty"`
}

func (x *ModerationSettingsOverview) Reset() {
	*x = ModerationSettingsOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModerationSettingsOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerationSettingsOverview) ProtoMessage() {}

func (x *ModerationSettingsOverview) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerationSettingsOverview.ProtoReflect.Descriptor instead.
func (*ModerationSettingsOverview) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{121}
}

func (x *ModerationSettingsOverview) GetAllowedVideoEnqueuing() AllowedVideoEnqueuingType {
	if x != nil {
		return x.AllowedVideoEnqueuing
	}
	return AllowedVideoEnqueuingType_DISABLED
}

func (x *ModerationSettingsOverview) GetEnqueuingPricesMultiplier() int32 {
	if x != nil {
		return x.EnqueuingPricesMultiplier
	}
	return 0
}

func (x *ModerationSettingsOverview) GetCrowdfundedSkippingEnabled() bool {
	if x != nil {
		return x.CrowdfundedSkippingEnabled
	}
	return false
}

func (x *ModerationSettingsOverview) GetCrowdfundedSkippingPricesMultiplier() int32 {
	if x != nil {
		return x.CrowdfundedSkippingPricesMultiplier
	}
	return 0
}

func (x *ModerationSettingsOverview) GetNewEntriesAlwaysUnskippable() bool {
	if x != nil {
		return x.NewEntriesAlwaysUnskippable
	}
	return false
}

func (x *ModerationSettingsOverview) GetOwnEntryRemovalEnabled() bool {
	if x != nil {
		return x.OwnEntryRemovalEnabled
	}
	return false
}

func (x *ModerationSettingsOverview) GetAllSkippingEnabled() bool {
	if x != nil {
		return x.AllSkippingEnabled
	}
	return false
}

func (x *ModerationSettingsOverview) GetQueueInsertCursor() string {
	if x != nil && x.QueueInsertCursor != nil {
		return *x.QueueInsertCursor
	}
	return ""
}

func (x *ModerationSettingsOverview) GetMinimumPricesMultiplier() int32 {
	if x != nil {
		return x.MinimumPricesMultiplier
	}
	return 0
}

type SetOwnQueueEntryRemovalAllowedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *SetOwnQueueEntryRemovalAllowedRequest) Reset() {
	*x = SetOwnQueueEntryRemovalAllowedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOwnQueueEntryRemovalAllowedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOwnQueueEntryRemovalAllowedRequest) ProtoMessage() {}

func (x *SetOwnQueueEntryRemovalAllowedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOwnQueueEntryRemovalAllowedRequest.ProtoReflect.Descriptor instead.
func (*SetOwnQueueEntryRemovalAllowedRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{122}
}

func (x *SetOwnQueueEntryRemovalAllowedRequest) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

type SetOwnQueueEntryRemovalAllowedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOwnQueueEntryRemovalAllowedResponse) Reset() {
	*x = SetOwnQueueEntryRemovalAllowedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOwnQueueEntryRemovalAllowedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOwnQueueEntryRemovalAllowedResponse) ProtoMessage() {}

func (x *SetOwnQueueEntryRemovalAllowedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOwnQueueEntryRemovalAllowedResponse.ProtoReflect.Descriptor instead.
func (*SetOwnQueueEntryRemovalAllowedResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{123}
}

type SetNewQueueEntriesAlwaysUnskippableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) Reset() {
	*x = SetNewQueueEntriesAlwaysUnskippableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNewQueueEntriesAlwaysUnskippableRequest) ProtoMessage() {}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNewQueueEntriesAlwaysUnskippableRequest.ProtoReflect.Descriptor instead.
func (*SetNewQueueEntriesAlwaysUnskippableRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{124}
}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetNewQueueEntriesAlwaysUnskippableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNewQueueEntriesAlwaysUnskippableResponse) Reset() {
	*x = SetNewQueueEntriesAlwaysUnskippableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNewQueueEntriesAlwaysUnskippableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNewQueueEntriesAlwaysUnskippableResponse) ProtoMessage() {}

func (x *SetNewQueueEntriesAlwaysUnskippableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNewQueueEntriesAlwaysUnskippableResponse.ProtoReflect.Descriptor instead.
func (*SetNewQueueEntriesAlwaysUnskippableResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{125}
}

type SetSkippingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetSkippingEnabledRequest) Reset() {
	*x = SetSkippingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkippingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkippingEnabledRequest) ProtoMessage() {}

func (x *SetSkippingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkippingEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetSkippingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{126}
}

func (x *SetSkippingEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetSkippingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSkippingEnabledResponse) Reset() {
	*x = SetSkippingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkippingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkippingEnabledResponse) ProtoMessage() {}

func (x *SetSkippingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkippingEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetSkippingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{127}
}

type ConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionsRequest) Reset() {
	*x = ConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionsRequest) ProtoMessage() {}

func (x *ConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{128}
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Service   ConnectionService      `protobuf:"varint,2,opt,name=service,proto3,enum=jungletv.ConnectionService" json:"service,omitempty"`
	Name      string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{129}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetService() ConnectionService {
	if x != nil {
		return x.Service
	}
	return ConnectionService_UNKNOWN_CONNECTION_SERVICE
}

func (x *Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service        ConnectionService `protobuf:"varint,1,opt,name=service,proto3,enum=jungletv.ConnectionService" json:"service,omitempty"`
	MaxConnections *int32            `protobuf:"varint,2,opt,name=max_connections,json=maxConnections,proto3,oneof" json:"max_connections,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{130}
}

func (x *ServiceInfo) GetService() ConnectionService {
	if x != nil {
		return x.Service
	}
	return ConnectionService_UNKNOWN_CONNECTION_SERVICE
}

func (x *ServiceInfo) GetMaxConnections() int32 {
	if x != nil && x.MaxConnections != nil {
		return *x.MaxConnections
	}
	return 0
}

type ConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections  []*Connection  `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
	ServiceInfos []*ServiceInfo `protobuf:"bytes,2,rep,name=service_infos,json=serviceInfos,proto3" json:"service_infos,omitempty"`
}

func (x *ConnectionsResponse) Reset() {
	*x = ConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionsResponse) ProtoMessage() {}

func (x *ConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{131}
}

func (x *ConnectionsResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ConnectionsResponse) GetServiceInfos() []*ServiceInfo {
	if x != nil {
		return x.ServiceInfos
	}
	return nil
}

type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service ConnectionService `protobuf:"varint,1,opt,name=service,proto3,enum=jungletv.ConnectionService" json:"service,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{132}
}

func (x *CreateConnectionRequest) GetService() ConnectionService {
	if x != nil {
		return x.Service
	}
	return ConnectionService_UNKNOWN_CONNECTION_SERVICE
}

type CreateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthUrl string `protobuf:"bytes,1,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
}

func (x *CreateConnectionResponse) Reset() {
	*x = CreateConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionResponse) ProtoMessage() {}

func (x *CreateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{133}
}

func (x *CreateConnectionResponse) GetAuthUrl() string {
	if x != nil {
		return x.AuthUrl
	}
	return ""
}

type RemoveConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveConnectionRequest) Reset() {
	*x = RemoveConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConnectionRequest) ProtoMessage() {}

func (x *RemoveConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConnectionRequest.ProtoReflect.Descriptor instead.
func (*RemoveConnectionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{134}
}

func (x *RemoveConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveConnectionResponse) Reset() {
	*x = RemoveConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConnectionResponse) ProtoMessage() {}

func (x *RemoveConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConnectionResponse.ProtoReflect.Descriptor instead.
func (*RemoveConnectionResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{135}
}

type SetQueueInsertCursorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SetQueueInsertCursorRequest) Reset() {
	*x = SetQueueInsertCursorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQueueInsertCursorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQueueInsertCursorRequest) ProtoMessage() {}

func (x *SetQueueInsertCursorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQueueInsertCursorRequest.ProtoReflect.Descriptor instead.
func (*SetQueueInsertCursorRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{136}
}

func (x *SetQueueInsertCursorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetQueueInsertCursorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetQueueInsertCursorResponse) Reset() {
	*x = SetQueueInsertCursorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQueueInsertCursorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQueueInsertCursorResponse) ProtoMessage() {}

func (x *SetQueueInsertCursorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQueueInsertCursorResponse.ProtoReflect.Descriptor instead.
func (*SetQueueInsertCursorResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{137}
}

type ClearQueueInsertCursorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearQueueInsertCursorRequest) Reset() {
	*x = ClearQueueInsertCursorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearQueueInsertCursorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearQueueInsertCursorRequest) ProtoMessage() {}

func (x *ClearQueueInsertCursorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearQueueInsertCursorRequest.ProtoReflect.Descriptor instead.
func (*ClearQueueInsertCursorRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{138}
}

type ClearQueueInsertCursorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearQueueInsertCursorResponse) Reset() {
	*x = ClearQueueInsertCursorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearQueueInsertCursorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearQueueInsertCursorResponse) ProtoMessage() {}

func (x *ClearQueueInsertCursorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearQueueInsertCursorResponse.ProtoReflect.Descriptor instead.
func (*ClearQueueInsertCursorResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{139}
}

type UserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserProfileRequest) Reset() {
	*x = UserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRequest) ProtoMessage() {}

func (x *UserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRequest.ProtoReflect.Descriptor instead.
func (*UserProfileRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{140}
}

func (x *UserProfileRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                   *User          `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RecentlyPlayedRequests []*PlayedMedia `protobuf:"bytes,2,rep,name=recently_played_requests,json=recentlyPlayedRequests,proto3" json:"recently_played_requests,omitempty"`
	Biography              string         `protobuf:"bytes,3,opt,name=biography,proto3" json:"biography,omitempty"`
	// Types that are assignable to FeaturedMedia:
	//	*UserProfileResponse_YoutubeVideoData
	FeaturedMedia isUserProfileResponse_FeaturedMedia `protobuf_oneof:"featured_media"`
}

func (x *UserProfileResponse) Reset() {
	*x = UserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileResponse) ProtoMessage() {}

func (x *UserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileResponse.ProtoReflect.Descriptor instead.
func (*UserProfileResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{141}
}

func (x *UserProfileResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserProfileResponse) GetRecentlyPlayedRequests() []*PlayedMedia {
	if x != nil {
		return x.RecentlyPlayedRequests
	}
	return nil
}

func (x *UserProfileResponse) GetBiography() string {
	if x != nil {
		return x.Biography
	}
	return ""
}

func (m *UserProfileResponse) GetFeaturedMedia() isUserProfileResponse_FeaturedMedia {
	if m != nil {
		return m.FeaturedMedia
	}
	return nil
}

func (x *UserProfileResponse) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetFeaturedMedia().(*UserProfileResponse_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

type isUserProfileResponse_FeaturedMedia interface {
	isUserProfileResponse_FeaturedMedia()
}

type UserProfileResponse_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,4,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

func (*UserProfileResponse_YoutubeVideoData) isUserProfileResponse_FeaturedMedia() {}

type UserStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserStatsRequest) Reset() {
	*x = UserStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatsRequest) ProtoMessage() {}

func (x *UserStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatsRequest.ProtoReflect.Descriptor instead.
func (*UserStatsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{142}
}

func (x *UserStatsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UserStatsForPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSpent             string               `protobuf:"bytes,1,opt,name=total_spent,json=totalSpent,proto3" json:"total_spent,omitempty"`
	TotalWithdrawn         string               `protobuf:"bytes,2,opt,name=total_withdrawn,json=totalWithdrawn,proto3" json:"total_withdrawn,omitempty"`
	RequestedMediaCount    int32                `protobuf:"varint,3,opt,name=requested_media_count,json=requestedMediaCount,proto3" json:"requested_media_count,omitempty"`
	RequestedMediaPlayTime *durationpb.Duration `protobuf:"bytes,4,opt,name=requested_media_play_time,json=requestedMediaPlayTime,proto3" json:"requested_media_play_time,omitempty"`
}

func (x *UserStatsForPeriod) Reset() {
	*x = UserStatsForPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatsForPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatsForPeriod) ProtoMessage() {}

func (x *UserStatsForPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatsForPeriod.ProtoReflect.Descriptor instead.
func (*UserStatsForPeriod) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{143}
}

func (x *UserStatsForPeriod) GetTotalSpent() string {
	if x != nil {
		return x.TotalSpent
	}
	return ""
}

func (x *UserStatsForPeriod) GetTotalWithdrawn() string {
	if x != nil {
		return x.TotalWithdrawn
	}
	return ""
}

func (x *UserStatsForPeriod) GetRequestedMediaCount() int32 {
	if x != nil {
		return x.RequestedMediaCount
	}
	return 0
}

func (x *UserStatsForPeriod) GetRequestedMediaPlayTime() *durationpb.Duration {
	if x != nil {
		return x.RequestedMediaPlayTime
	}
	return nil
}

type UserStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatsAllTime *UserStatsForPeriod `protobuf:"bytes,1,opt,name=stats_all_time,json=statsAllTime,proto3" json:"stats_all_time,omitempty"`
	Stats_30Days *UserStatsForPeriod `protobuf:"bytes,2,opt,name=stats_30_days,json=stats30Days,proto3" json:"stats_30_days,omitempty"`
	Stats_7Days  *UserStatsForPeriod `protobuf:"bytes,3,opt,name=stats_7_days,json=stats7Days,proto3" json:"stats_7_days,omitempty"`
}

func (x *UserStatsResponse) Reset() {
	*x = UserStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatsResponse) ProtoMessage() {}

func (x *UserStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatsResponse.ProtoReflect.Descriptor instead.
func (*UserStatsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{144}
}

func (x *UserStatsResponse) GetStatsAllTime() *UserStatsForPeriod {
	if x != nil {
		return x.StatsAllTime
	}
	return nil
}

func (x *UserStatsResponse) GetStats_30Days() *UserStatsForPeriod {
	if x != nil {
		return x.Stats_30Days
	}
	return nil
}

func (x *UserStatsResponse) GetStats_7Days() *UserStatsForPeriod {
	if x != nil {
		return x.Stats_7Days
	}
	return nil
}

type PlayedMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestedBy *User                  `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3,oneof" json:"requested_by,omitempty"`
	RequestCost string                 `protobuf:"bytes,3,opt,name=request_cost,json=requestCost,proto3" json:"request_cost,omitempty"`
	EnqueuedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ended_at,json=endedAt,proto3,oneof" json:"ended_at,omitempty"`
	Length      *durationpb.Duration   `protobuf:"bytes,7,opt,name=length,proto3" json:"length,omitempty"`
	Offset      *durationpb.Duration   `protobuf:"bytes,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Unskippable bool                   `protobuf:"varint,9,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*PlayedMedia_YoutubeVideoData
	MediaInfo isPlayedMedia_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *PlayedMedia) Reset() {
	*x = PlayedMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedMedia) ProtoMessage() {}

func (x *PlayedMedia) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedMedia.ProtoReflect.Descriptor instead.
func (*PlayedMedia) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{145}
}

func (x *PlayedMedia) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayedMedia) GetRequestedBy() *User {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *PlayedMedia) GetRequestCost() string {
	if x != nil {
		return x.RequestCost
	}
	return ""
}

func (x *PlayedMedia) GetEnqueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

func (x *PlayedMedia) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *PlayedMedia) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *PlayedMedia) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *PlayedMedia) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *PlayedMedia) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (m *PlayedMedia) GetMediaInfo() isPlayedMedia_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *PlayedMedia) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*PlayedMedia_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

type isPlayedMedia_MediaInfo interface {
	isPlayedMedia_MediaInfo()
}

type PlayedMedia_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,10,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

func (*PlayedMedia_YoutubeVideoData) isPlayedMedia_MediaInfo() {}

type SetProfileBiographyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Biography string `protobuf:"bytes,1,opt,name=biography,proto3" json:"biography,omitempty"`
}

func (x *SetProfileBiographyRequest) Reset() {
	*x = SetProfileBiographyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileBiographyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileBiographyRequest) ProtoMessage() {}

func (x *SetProfileBiographyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileBiographyRequest.ProtoReflect.Descriptor instead.
func (*SetProfileBiographyRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{146}
}

func (x *SetProfileBiographyRequest) GetBiography() string {
	if x != nil {
		return x.Biography
	}
	return ""
}

type SetProfileBiographyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetProfileBiographyResponse) Reset() {
	*x = SetProfileBiographyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileBiographyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileBiographyResponse) ProtoMessage() {}

func (x *SetProfileBiographyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileBiographyResponse.ProtoReflect.Descriptor instead.
func (*SetProfileBiographyResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{147}
}

type SetProfileFeaturedMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId *string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3,oneof" json:"media_id,omitempty"`
}

func (x *SetProfileFeaturedMediaRequest) Reset() {
	*x = SetProfileFeaturedMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileFeaturedMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileFeaturedMediaRequest) ProtoMessage() {}

func (x *SetProfileFeaturedMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileFeaturedMediaRequest.ProtoReflect.Descriptor instead.
func (*SetProfileFeaturedMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{148}
}

func (x *SetProfileFeaturedMediaRequest) GetMediaId() string {
	if x != nil && x.MediaId != nil {
		return *x.MediaId
	}
	return ""
}

type SetProfileFeaturedMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetProfileFeaturedMediaResponse) Reset() {
	*x = SetProfileFeaturedMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileFeaturedMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileFeaturedMediaResponse) ProtoMessage() {}

func (x *SetProfileFeaturedMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileFeaturedMediaResponse.ProtoReflect.Descriptor instead.
func (*SetProfileFeaturedMediaResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{149}
}

type ClearUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ClearUserProfileRequest) Reset() {
	*x = ClearUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUserProfileRequest) ProtoMessage() {}

func (x *ClearUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUserProfileRequest.ProtoReflect.Descriptor instead.
func (*ClearUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{150}
}

func (x *ClearUserProfileRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ClearUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearUserProfileResponse) Reset() {
	*x = ClearUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUserProfileResponse) ProtoMessage() {}

func (x *ClearUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUserProfileResponse.ProtoReflect.Descriptor instead.
func (*ClearUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{151}
}

type PlayedMediaHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
}

func (x *PlayedMediaHistoryRequest) Reset() {
	*x = PlayedMediaHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedMediaHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedMediaHistoryRequest) ProtoMessage() {}

func (x *PlayedMediaHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedMediaHistoryRequest.ProtoReflect.Descriptor instead.
func (*PlayedMediaHistoryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{152}
}

func (x *PlayedMediaHistoryRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *PlayedMediaHistoryRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type PlayedMediaHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayedMedia []*PlayedMedia `protobuf:"bytes,1,rep,name=played_media,json=playedMedia,proto3" json:"played_media,omitempty"`
	Offset      uint64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total       uint64         `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PlayedMediaHistoryResponse) Reset() {
	*x = PlayedMediaHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedMediaHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedMediaHistoryResponse) ProtoMessage() {}

func (x *PlayedMediaHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedMediaHistoryResponse.ProtoReflect.Descriptor instead.
func (*PlayedMediaHistoryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{153}
}

func (x *PlayedMediaHistoryResponse) GetPlayedMedia() []*PlayedMedia {
	if x != nil {
		return x.PlayedMedia
	}
	return nil
}

func (x *PlayedMediaHistoryResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PlayedMediaHistoryResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type BlockUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *BlockUserRequest) Reset() {
	*x = BlockUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserRequest) ProtoMessage() {}

func (x *BlockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserRequest.ProtoReflect.Descriptor instead.
func (*BlockUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{154}
}

func (x *BlockUserRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BlockUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockUserResponse) Reset() {
	*x = BlockUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResponse) ProtoMessage() {}

func (x *BlockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResponse.ProtoReflect.Descriptor instead.
func (*BlockUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{155}
}

type UnblockUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BlockIdentification:
	//	*UnblockUserRequest_BlockId
	//	*UnblockUserRequest_Address
	BlockIdentification isUnblockUserRequest_BlockIdentification `protobuf_oneof:"block_identification"`
}

func (x *UnblockUserRequest) Reset() {
	*x = UnblockUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserRequest) ProtoMessage() {}

func (x *UnblockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserRequest.ProtoReflect.Descriptor instead.
func (*UnblockUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{156}
}

func (m *UnblockUserRequest) GetBlockIdentification() isUnblockUserRequest_BlockIdentification {
	if m != nil {
		return m.BlockIdentification
	}
	return nil
}

func (x *UnblockUserRequest) GetBlockId() string {
	if x, ok := x.GetBlockIdentification().(*UnblockUserRequest_BlockId); ok {
		return x.BlockId
	}
	return ""
}

func (x *UnblockUserRequest) GetAddress() string {
	if x, ok := x.GetBlockIdentification().(*UnblockUserRequest_Address); ok {
		return x.Address
	}
	return ""
}

type isUnblockUserRequest_BlockIdentification interface {
	isUnblockUserRequest_BlockIdentification()
}

type UnblockUserRequest_BlockId struct {
	BlockId string `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3,oneof"`
}

type UnblockUserRequest_Address struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

func (*UnblockUserRequest_BlockId) isUnblockUserRequest_BlockIdentification() {}

func (*UnblockUserRequest_Address) isUnblockUserRequest_BlockIdentification() {}

type UnblockUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockUserResponse) Reset() {
	*x = UnblockUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserResponse) ProtoMessage() {}

func (x *UnblockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserResponse.ProtoReflect.Descriptor instead.
func (*UnblockUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{157}
}

type BlockedUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *BlockedUsersRequest) Reset() {
	*x = BlockedUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedUsersRequest) ProtoMessage() {}

func (x *BlockedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedUsersRequest.ProtoReflect.Descriptor instead.
func (*BlockedUsersRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{158}
}

func (x *BlockedUsersRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type BlockedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockedUser *User                  `protobuf:"bytes,2,opt,name=blocked_user,json=blockedUser,proto3" json:"blocked_user,omitempty"`
	BlockedBy   *User                  `protobuf:"bytes,3,opt,name=blocked_by,json=blockedBy,proto3" json:"blocked_by,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *BlockedUser) Reset() {
	*x = BlockedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedUser) ProtoMessage() {}

func (x *BlockedUser) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedUser.ProtoReflect.Descriptor instead.
func (*BlockedUser) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{159}
}

func (x *BlockedUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockedUser) GetBlockedUser() *User {
	if x != nil {
		return x.BlockedUser
	}
	return nil
}

func (x *BlockedUser) GetBlockedBy() *User {
	if x != nil {
		return x.BlockedBy
	}
	return nil
}

func (x *BlockedUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type BlockedUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedUsers []*BlockedUser `protobuf:"bytes,1,rep,name=blocked_users,json=blockedUsers,proto3" json:"blocked_users,omitempty"`
	Offset       uint64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total        uint64         `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BlockedUsersResponse) Reset() {
	*x = BlockedUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedUsersResponse) ProtoMessage() {}

func (x *BlockedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedUsersResponse.ProtoReflect.Descriptor instead.
func (*BlockedUsersResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{160}
}

func (x *BlockedUsersResponse) GetBlockedUsers() []*BlockedUser {
	if x != nil {
		return x.BlockedUsers
	}
	return nil
}

func (x *BlockedUsersResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BlockedUsersResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_jungletv_proto protoreflect.FileDescriptor

var file_jungletv_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x14, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x38, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x0e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42,
	0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x6e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x23, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x22, 0x76, 0x0a,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45,
	0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f,
	0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x11, 0x0a, 0x0f, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x75, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75,
	0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc0, 0x04, 0x0a, 0x12, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x49,
	0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x12, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75,
	0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a, 0x14, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x1a, 0x4e, 0x6f, 0x77, 0x50,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xeb, 0x06, 0x0a, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x03,
	0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x75, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4e, 0x6f, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x78, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x22, 0x15,
	0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75,
	0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x22, 0x98, 0x03, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f,
	0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75,
	0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x1a, 0x0a,
	0x18, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x54,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x53, 0x6b,
	0x69, 0x70, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x6b, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6b, 0x69, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x69,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12,
	0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x1c, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x49, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x1c, 0x46, 0x6f, 0x72,
	0x63, 0x69, 0x62, 0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x1f, 0x0a, 0x1d, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xaa, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a,
	0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x46, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x98, 0x04, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x59, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x2d, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x49, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4a,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x43,
	0x68, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x1b,
	0x43, 0x68, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x02,
	0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0x41, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x75,
	0x6e, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x75, 0x6e, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x22, 0x70, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x4d, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63,
	0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0xcd, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x79, 0x74, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x79, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x79, 0x74, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x79, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x3b, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x79, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22,
	0x2c, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a,
	0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a,
	0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a,
	0x1a, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x1d,
	0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a,
	0x21, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4a, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x74,
	0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x4e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x63, 0x0a, 0x14, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75,
	0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x8a, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x67, 0x0a, 0x18,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x40, 0x0a, 0x24,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x27,
	0x0a, 0x25, 0x53, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x53, 0x6b,
	0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x53,
	0x6b, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x1e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x67, 0x63, 0x68,
	0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x53, 0x65, 0x67, 0x63, 0x68, 0x61, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x39, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61, 0x66,
	0x66, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x57, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x7a, 0x65,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4a, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x66, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x66, 0x66,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14,
	0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x6e, 0x0a, 0x19, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xc4, 0x02, 0x0a, 0x11, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x66, 0x66, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x29, 0x0a, 0x27, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f,
	0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x9e, 0x05, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x53, 0x0a, 0x27, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x22, 0x6e, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x69, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x12, 0x6e, 0x6f, 0x74, 0x4c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x48, 0x02, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x6c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x22, 0x46, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x05, 0x0a,
	0x1a, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x5b, 0x0a, 0x17, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x72, 0x6f, 0x77,
	0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x63, 0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x26, 0x63, 0x72,
	0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x63, 0x72, 0x6f, 0x77,
	0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x1e, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x25, 0x53, 0x65,
	0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x28, 0x0a,
	0x26, 0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x2a, 0x53, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x2d, 0x0a, 0x2b, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x0a, 0x19, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x86,
	0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x22, 0x29, 0x0a, 0x17,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x12, 0x4f, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75,
	0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x10, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x22, 0x2c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x41,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x33, 0x30, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x33, 0x30, 0x44, 0x61, 0x79, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x37, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x37, 0x44, 0x61, 0x79, 0x73, 0x22, 0xb1, 0x04, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x01,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4f, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54,
	0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x0a, 0x1a,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1a,
	0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x2c, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x13, 0x0a,
	0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x65, 0x0a, 0x12, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x16, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x62, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2a, 0x3d, 0x0a, 0x18, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0xdf, 0x01, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x4b, 0x49,
	0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4b, 0x49, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4b, 0x49, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x10, 0x06, 0x2a, 0x78, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x32,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x49, 0x45, 0x52, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x2a,
	0x55, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x57, 0x41, 0x59, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x12, 0x43,
	0x68, 0x61, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x46, 0x0a,
	0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x46,
	0x46, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x10, 0x02, 0x2a, 0x69, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x32, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x03, 0x2a, 0x46, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x4d, 0x4f, 0x4e, 0x4b,
	0x45, 0x59, 0x53, 0x10, 0x01, 0x32, 0xd1, 0x2d, 0x0a, 0x08, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x54, 0x56, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x17, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0c, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1d, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x11, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x12,
	0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x6b, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67, 0x63, 0x68,
	0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67,
	0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1c,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x11, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x28, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0b, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x15, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62,
	0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x42, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x26, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x27, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61, 0x66,
	0x66, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61, 0x66, 0x66,
	0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61,
	0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8b, 0x01, 0x0a, 0x20, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x23, 0x53,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6e, 0x79, 0x69, 0x6d, 0x2f, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jungletv_proto_rawDescOnce sync.Once
	file_jungletv_proto_rawDescData = file_jungletv_proto_rawDesc
)

func file_jungletv_proto_rawDescGZIP() []byte {
	file_jungletv_proto_rawDescOnce.Do(func() {
		file_jungletv_proto_rawDescData = protoimpl.X.CompressGZIP(file_jungletv_proto_rawDescData)
	})
	return file_jungletv_proto_rawDescData
}

var file_jungletv_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_jungletv_proto_msgTypes = make([]protoimpl.MessageInfo, 161)
var file_jungletv_proto_goTypes = []interface{}{
	(EnqueueMediaTicketStatus)(0),                       // 0: jungletv.EnqueueMediaTicketStatus
	(SkipStatus)(0),                                     // 1: jungletv.SkipStatus
	(UserRole)(0),                                       // 2: jungletv.UserRole
	(UserStatus)(0),                                     // 3: jungletv.UserStatus
	(ForcedTicketEnqueueType)(0),                        // 4: jungletv.ForcedTicketEnqueueType
	(ChatDisabledReason)(0),                             // 5: jungletv.ChatDisabledReason
	(AllowedVideoEnqueuingType)(0),                      // 6: jungletv.AllowedVideoEnqueuingType
	(PermissionLevel)(0),                                // 7: jungletv.PermissionLevel
	(LeaderboardPeriod)(0),                              // 8: jungletv.LeaderboardPeriod
	(ConnectionService)(0),                              // 9: jungletv.ConnectionService
	(*PaginationParameters)(nil),                        // 10: jungletv.PaginationParameters
	(*SignInRequest)(nil),                               // 11: jungletv.SignInRequest
	(*SignInProgress)(nil),                              // 12: jungletv.SignInProgress
	(*SignInVerification)(nil),                          // 13: jungletv.SignInVerification
	(*SignInAccountUnopened)(nil),                       // 14: jungletv.SignInAccountUnopened
	(*SignInResponse)(nil),                              // 15: jungletv.SignInResponse
	(*SignInVerificationExpired)(nil),                   // 16: jungletv.SignInVerificationExpired
	(*EnqueueYouTubeVideoData)(nil),                     // 17: jungletv.EnqueueYouTubeVideoData
	(*EnqueueStubData)(nil),                             // 18: jungletv.EnqueueStubData
	(*EnqueueMediaRequest)(nil),                         // 19: jungletv.EnqueueMediaRequest
	(*EnqueueMediaResponse)(nil),                        // 20: jungletv.EnqueueMediaResponse
	(*EnqueueMediaFailure)(nil),                         // 21: jungletv.EnqueueMediaFailure
	(*EnqueueMediaTicket)(nil),                          // 22: jungletv.EnqueueMediaTicket
	(*MonitorTicketRequest)(nil),                        // 23: jungletv.MonitorTicketRequest
	(*RemoveOwnQueueEntryRequest)(nil),                  // 24: jungletv.RemoveOwnQueueEntryRequest
	(*RemoveOwnQueueEntryResponse)(nil),                 // 25: jungletv.RemoveOwnQueueEntryResponse
	(*ConsumeMediaRequest)(nil),                         // 26: jungletv.ConsumeMediaRequest
	(*NowPlayingStubData)(nil),                          // 27: jungletv.NowPlayingStubData
	(*NowPlayingYouTubeVideoData)(nil),                  // 28: jungletv.NowPlayingYouTubeVideoData
	(*MediaConsumptionCheckpoint)(nil),                  // 29: jungletv.MediaConsumptionCheckpoint
	(*ActivityChallenge)(nil),                           // 30: jungletv.ActivityChallenge
	(*MonitorQueueRequest)(nil),                         // 31: jungletv.MonitorQueueRequest
	(*Queue)(nil),                                       // 32: jungletv.Queue
	(*QueueYouTubeVideoData)(nil),                       // 33: jungletv.QueueYouTubeVideoData
	(*QueueEntry)(nil),                                  // 34: jungletv.QueueEntry
	(*MonitorSkipAndTipRequest)(nil),                    // 35: jungletv.MonitorSkipAndTipRequest
	(*SkipAndTipStatus)(nil),                            // 36: jungletv.SkipAndTipStatus
	(*User)(nil),                                        // 37: jungletv.User
	(*RewardInfoRequest)(nil),                           // 38: jungletv.RewardInfoRequest
	(*RewardInfoResponse)(nil),                          // 39: jungletv.RewardInfoResponse
	(*RemoveQueueEntryRequest)(nil),                     // 40: jungletv.RemoveQueueEntryRequest
	(*RemoveQueueEntryResponse)(nil),                    // 41: jungletv.RemoveQueueEntryResponse
	(*ForciblyEnqueueTicketRequest)(nil),                // 42: jungletv.ForciblyEnqueueTicketRequest
	(*ForciblyEnqueueTicketResponse)(nil),               // 43: jungletv.ForciblyEnqueueTicketResponse
	(*SubmitActivityChallengeRequest)(nil),              // 44: jungletv.SubmitActivityChallengeRequest
	(*SubmitActivityChallengeResponse)(nil),             // 45: jungletv.SubmitActivityChallengeResponse
	(*ConsumeChatRequest)(nil),                          // 46: jungletv.ConsumeChatRequest
	(*ChatUpdate)(nil),                                  // 47: jungletv.ChatUpdate
	(*ChatMessage)(nil),                                 // 48: jungletv.ChatMessage
	(*UserChatMessage)(nil),                             // 49: jungletv.UserChatMessage
	(*SystemChatMessage)(nil),                           // 50: jungletv.SystemChatMessage
	(*ChatDisabledEvent)(nil),                           // 51: jungletv.ChatDisabledEvent
	(*ChatEnabledEvent)(nil),                            // 52: jungletv.ChatEnabledEvent
	(*ChatMessageCreatedEvent)(nil),                     // 53: jungletv.ChatMessageCreatedEvent
	(*ChatMessageDeletedEvent)(nil),                     // 54: jungletv.ChatMessageDeletedEvent
	(*ChatHeartbeatEvent)(nil),                          // 55: jungletv.ChatHeartbeatEvent
	(*ChatBlockedUserCreatedEvent)(nil),                 // 56: jungletv.ChatBlockedUserCreatedEvent
	(*ChatBlockedUserDeletedEvent)(nil),                 // 57: jungletv.ChatBlockedUserDeletedEvent
	(*SendChatMessageRequest)(nil),                      // 58: jungletv.SendChatMessageRequest
	(*SendChatMessageResponse)(nil),                     // 59: jungletv.SendChatMessageResponse
	(*RemoveChatMessageRequest)(nil),                    // 60: jungletv.RemoveChatMessageRequest
	(*RemoveChatMessageResponse)(nil),                   // 61: jungletv.RemoveChatMessageResponse
	(*SetChatSettingsRequest)(nil),                      // 62: jungletv.SetChatSettingsRequest
	(*SetChatSettingsResponse)(nil),                     // 63: jungletv.SetChatSettingsResponse
	(*BanUserRequest)(nil),                              // 64: jungletv.BanUserRequest
	(*BanUserResponse)(nil),                             // 65: jungletv.BanUserResponse
	(*RemoveBanRequest)(nil),                            // 66: jungletv.RemoveBanRequest
	(*RemoveBanResponse)(nil),                           // 67: jungletv.RemoveBanResponse
	(*UserBan)(nil),                                     // 68: jungletv.UserBan
	(*UserBansRequest)(nil),                             // 69: jungletv.UserBansRequest
	(*UserBansResponse)(nil),                            // 70: jungletv.UserBansResponse
	(*SetVideoEnqueuingEnabledRequest)(nil),             // 71: jungletv.SetVideoEnqueuingEnabledRequest
	(*SetVideoEnqueuingEnabledResponse)(nil),            // 72: jungletv.SetVideoEnqueuingEnabledResponse
	(*UserChatMessagesRequest)(nil),                     // 73: jungletv.UserChatMessagesRequest
	(*UserChatMessagesResponse)(nil),                    // 74: jungletv.UserChatMessagesResponse
	(*UserPermissionLevelRequest)(nil),                  // 75: jungletv.UserPermissionLevelRequest
	(*UserPermissionLevelResponse)(nil),                 // 76: jungletv.UserPermissionLevelResponse
	(*DisallowedVideosRequest)(nil),                     // 77: jungletv.DisallowedVideosRequest
	(*DisallowedVideo)(nil),                             // 78: jungletv.DisallowedVideo
	(*DisallowedVideosResponse)(nil),                    // 79: jungletv.DisallowedVideosResponse
	(*AddDisallowedVideoRequest)(nil),                   // 80: jungletv.AddDisallowedVideoRequest
	(*AddDisallowedVideoResponse)(nil),                  // 81: jungletv.AddDisallowedVideoResponse
	(*RemoveDisallowedVideoRequest)(nil),                // 82: jungletv.RemoveDisallowedVideoRequest
	(*RemoveDisallowedVideoResponse)(nil),               // 83: jungletv.RemoveDisallowedVideoResponse
	(*GetDocumentRequest)(nil),                          // 84: jungletv.GetDocumentRequest
	(*Document)(nil),                                    // 85: jungletv.Document
	(*UpdateDocumentResponse)(nil),                      // 86: jungletv.UpdateDocumentResponse
	(*SetChatNicknameRequest)(nil),                      // 87: jungletv.SetChatNicknameRequest
	(*SetChatNicknameResponse)(nil),                     // 88: jungletv.SetChatNicknameResponse
	(*SetUserChatNicknameRequest)(nil),                  // 89: jungletv.SetUserChatNicknameRequest
	(*SetUserChatNicknameResponse)(nil),                 // 90: jungletv.SetUserChatNicknameResponse
	(*SetPricesMultiplierRequest)(nil),                  // 91: jungletv.SetPricesMultiplierRequest
	(*SetPricesMultiplierResponse)(nil),                 // 92: jungletv.SetPricesMultiplierResponse
	(*SetMinimumPricesMultiplierRequest)(nil),           // 93: jungletv.SetMinimumPricesMultiplierRequest
	(*SetMinimumPricesMultiplierResponse)(nil),          // 94: jungletv.SetMinimumPricesMultiplierResponse
	(*WithdrawRequest)(nil),                             // 95: jungletv.WithdrawRequest
	(*WithdrawResponse)(nil),                            // 96: jungletv.WithdrawResponse
	(*LeaderboardsRequest)(nil),                         // 97: jungletv.LeaderboardsRequest
	(*LeaderboardsResponse)(nil),                        // 98: jungletv.LeaderboardsResponse
	(*Leaderboard)(nil),                                 // 99: jungletv.Leaderboard
	(*LeaderboardRow)(nil),                              // 100: jungletv.LeaderboardRow
	(*LeaderboardValue)(nil),                            // 101: jungletv.LeaderboardValue
	(*RewardHistoryRequest)(nil),                        // 102: jungletv.RewardHistoryRequest
	(*ReceivedReward)(nil),                              // 103: jungletv.ReceivedReward
	(*RewardHistoryResponse)(nil),                       // 104: jungletv.RewardHistoryResponse
	(*WithdrawalHistoryRequest)(nil),                    // 105: jungletv.WithdrawalHistoryRequest
	(*Withdrawal)(nil),                                  // 106: jungletv.Withdrawal
	(*WithdrawalHistoryResponse)(nil),                   // 107: jungletv.WithdrawalHistoryResponse
	(*SetCrowdfundedSkippingEnabledRequest)(nil),        // 108: jungletv.SetCrowdfundedSkippingEnabledRequest
	(*SetCrowdfundedSkippingEnabledResponse)(nil),       // 109: jungletv.SetCrowdfundedSkippingEnabledResponse
	(*SetSkipPriceMultiplierRequest)(nil),               // 110: jungletv.SetSkipPriceMultiplierRequest
	(*SetSkipPriceMultiplierResponse)(nil),              // 111: jungletv.SetSkipPriceMultiplierResponse
	(*ProduceSegchaChallengeRequest)(nil),               // 112: jungletv.ProduceSegchaChallengeRequest
	(*ProduceSegchaChallengeResponse)(nil),              // 113: jungletv.ProduceSegchaChallengeResponse
	(*SegchaChallengeStep)(nil),                         // 114: jungletv.SegchaChallengeStep
	(*ConfirmRaffleWinnerRequest)(nil),                  // 115: jungletv.ConfirmRaffleWinnerRequest
	(*ConfirmRaffleWinnerResponse)(nil),                 // 116: jungletv.ConfirmRaffleWinnerResponse
	(*CompleteRaffleRequest)(nil),                       // 117: jungletv.CompleteRaffleRequest
	(*CompleteRaffleResponse)(nil),                      // 118: jungletv.CompleteRaffleResponse
	(*RedrawRaffleRequest)(nil),                         // 119: jungletv.RedrawRaffleRequest
	(*RedrawRaffleResponse)(nil),                        // 120: jungletv.RedrawRaffleResponse
	(*OngoingRaffleInfoRequest)(nil),                    // 121: jungletv.OngoingRaffleInfoRequest
	(*OngoingRaffleInfoResponse)(nil),                   // 122: jungletv.OngoingRaffleInfoResponse
	(*OngoingRaffleInfo)(nil),                           // 123: jungletv.OngoingRaffleInfo
	(*TriggerAnnouncementsNotificationRequest)(nil),     // 124: jungletv.TriggerAnnouncementsNotificationRequest
	(*TriggerAnnouncementsNotificationResponse)(nil),    // 125: jungletv.TriggerAnnouncementsNotificationResponse
	(*SpectatorInfoRequest)(nil),                        // 126: jungletv.SpectatorInfoRequest
	(*Spectator)(nil),                                   // 127: jungletv.Spectator
	(*ResetSpectatorStatusRequest)(nil),                 // 128: jungletv.ResetSpectatorStatusRequest
	(*ResetSpectatorStatusResponse)(nil),                // 129: jungletv.ResetSpectatorStatusResponse
	(*MonitorModerationSettingsRequest)(nil),            // 130: jungletv.MonitorModerationSettingsRequest
	(*ModerationSettingsOverview)(nil),                  // 131: jungletv.ModerationSettingsOverview
	(*SetOwnQueueEntryRemovalAllowedRequest)(nil),       // 132: jungletv.SetOwnQueueEntryRemovalAllowedRequest
	(*SetOwnQueueEntryRemovalAllowedResponse)(nil),      // 133: jungletv.SetOwnQueueEntryRemovalAllowedResponse
	(*SetNewQueueEntriesAlwaysUnskippableRequest)(nil),  // 134: jungletv.SetNewQueueEntriesAlwaysUnskippableRequest
	(*SetNewQueueEntriesAlwaysUnskippableResponse)(nil), // 135: jungletv.SetNewQueueEntriesAlwaysUnskippableResponse
	(*SetSkippingEnabledRequest)(nil),                   // 136: jungletv.SetSkippingEnabledRequest
	(*SetSkippingEnabledResponse)(nil),                  // 137: jungletv.SetSkippingEnabledResponse
	(*ConnectionsRequest)(nil),                          // 138: jungletv.ConnectionsRequest
	(*Connection)(nil),                                  // 139: jungletv.Connection
	(*ServiceInfo)(nil),                                 // 140: jungletv.ServiceInfo
	(*ConnectionsResponse)(nil),                         // 141: jungletv.ConnectionsResponse
	(*CreateConnectionRequest)(nil),                     // 142: jungletv.CreateConnectionRequest
	(*CreateConnectionResponse)(nil),                    // 143: jungletv.CreateConnectionResponse
	(*RemoveConnectionRequest)(nil),                     // 144: jungletv.RemoveConnectionRequest
	(*RemoveConnectionResponse)(nil),                    // 145: jungletv.RemoveConnectionResponse
	(*SetQueueInsertCursorRequest)(nil),                 // 146: jungletv.SetQueueInsertCursorRequest
	(*SetQueueInsertCursorResponse)(nil),                // 147: jungletv.SetQueueInsertCursorResponse
	(*ClearQueueInsertCursorRequest)(nil),               // 148: jungletv.ClearQueueInsertCursorRequest
	(*ClearQueueInsertCursorResponse)(nil),              // 149: jungletv.ClearQueueInsertCursorResponse
	(*UserProfileRequest)(nil),                          // 150: jungletv.UserProfileRequest
	(*UserProfileResponse)(nil),                         // 151: jungletv.UserProfileResponse
	(*UserStatsRequest)(nil),                            // 152: jungletv.UserStatsRequest
	(*UserStatsForPeriod)(nil),                          // 153: jungletv.UserStatsForPeriod
	(*UserStatsResponse)(nil),                           // 154: jungletv.UserStatsResponse
	(*PlayedMedia)(nil),                                 // 155: jungletv.PlayedMedia
	(*SetProfileBiographyRequest)(nil),                  // 156: jungletv.SetProfileBiographyRequest
	(*SetProfileBiographyResponse)(nil),                 // 157: jungletv.SetProfileBiographyResponse
	(*SetProfileFeaturedMediaRequest)(nil),              // 158: jungletv.SetProfileFeaturedMediaRequest
	(*SetProfileFeaturedMediaResponse)(nil),             // 159: jungletv.SetProfileFeaturedMediaResponse
	(*ClearUserProfileRequest)(nil),                     // 160: jungletv.ClearUserProfileRequest
	(*ClearUserProfileResponse)(nil),                    // 161: jungletv.ClearUserProfileResponse
	(*PlayedMediaHistoryRequest)(nil),                   // 162: jungletv.PlayedMediaHistoryRequest
	(*PlayedMediaHistoryResponse)(nil),                  // 163: jungletv.PlayedMediaHistoryResponse
	(*BlockUserRequest)(nil),                            // 164: jungletv.BlockUserRequest
	(*BlockUserResponse)(nil),                           // 165: jungletv.BlockUserResponse
	(*UnblockUserRequest)(nil),                          // 166: jungletv.UnblockUserRequest
	(*UnblockUserResponse)(nil),                         // 167: jungletv.UnblockUserResponse
	(*BlockedUsersRequest)(nil),                         // 168: jungletv.BlockedUsersRequest
	(*BlockedUser)(nil),                                 // 169: jungletv.BlockedUser
	(*BlockedUsersResponse)(nil),                        // 170: jungletv.BlockedUsersResponse
	(*timestamppb.Timestamp)(nil),                       // 171: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                         // 172: google.protobuf.Duration
}
var file_jungletv_proto_depIdxs = []int32{
	13,  // 0: jungletv.SignInProgress.verification:type_name -> jungletv.SignInVerification
	15,  // 1: jungletv.SignInProgress.response:type_name -> jungletv.SignInResponse
	16,  // 2: jungletv.SignInProgress.expired:type_name -> jungletv.SignInVerificationExpired
	14,  // 3: jungletv.SignInProgress.account_unopened:type_name -> jungletv.SignInAccountUnopened
	171, // 4: jungletv.SignInVerification.expiration:type_name -> google.protobuf.Timestamp
	171, // 5: jungletv.SignInResponse.token_expiration:type_name -> google.protobuf.Timestamp
	172, // 6: jungletv.EnqueueYouTubeVideoData.start_offset:type_name -> google.protobuf.Duration
	172, // 7: jungletv.EnqueueYouTubeVideoData.end_offset:type_name -> google.protobuf.Duration
	18,  // 8: jungletv.EnqueueMediaRequest.stub_data:type_name -> jungletv.EnqueueStubData
	17,  // 9: jungletv.EnqueueMediaRequest.youtube_video_data:type_name -> jungletv.EnqueueYouTubeVideoData
	22,  // 10: jungletv.EnqueueMediaResponse.ticket:type_name -> jungletv.EnqueueMediaTicket
	21,  // 11: jungletv.EnqueueMediaResponse.failure:type_name -> jungletv.EnqueueMediaFailure
	0,   // 12: jungletv.EnqueueMediaTicket.status:type_name -> jungletv.EnqueueMediaTicketStatus
	171, // 13: jungletv.EnqueueMediaTicket.expiration:type_name -> google.protobuf.Timestamp
	172, // 14: jungletv.EnqueueMediaTicket.media_length:type_name -> google.protobuf.Duration
	33,  // 15: jungletv.EnqueueMediaTicket.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	172, // 16: jungletv.MediaConsumptionCheckpoint.current_position:type_name -> google.protobuf.Duration
	37,  // 17: jungletv.MediaConsumptionCheckpoint.requested_by:type_name -> jungletv.User
	30,  // 18: jungletv.MediaConsumptionCheckpoint.activity_challenge:type_name -> jungletv.ActivityChallenge
	27,  // 19: jungletv.MediaConsumptionCheckpoint.stub_data:type_name -> jungletv.NowPlayingStubData
	28,  // 20: jungletv.MediaConsumptionCheckpoint.youtube_video_data:type_name -> jungletv.NowPlayingYouTubeVideoData
	171, // 21: jungletv.ActivityChallenge.challenged_at:type_name -> google.protobuf.Timestamp
	34,  // 22: jungletv.Queue.entries:type_name -> jungletv.QueueEntry
	171, // 23: jungletv.Queue.playing_since:type_name -> google.protobuf.Timestamp
	37,  // 24: jungletv.QueueEntry.requested_by:type_name -> jungletv.User
	171, // 25: jungletv.QueueEntry.requested_at:type_name -> google.protobuf.Timestamp
	172, // 26: jungletv.QueueEntry.length:type_name -> google.protobuf.Duration
	172, // 27: jungletv.QueueEntry.offset:type_name -> google.protobuf.Duration
	33,  // 28: jungletv.QueueEntry.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	1,   // 29: jungletv.SkipAndTipStatus.skip_status:type_name -> jungletv.SkipStatus
	2,   // 30: jungletv.User.roles:type_name -> jungletv.UserRole
	3,   // 31: jungletv.User.status:type_name -> jungletv.UserStatus
	4,   // 32: jungletv.ForciblyEnqueueTicketRequest.enqueue_type:type_name -> jungletv.ForcedTicketEnqueueType
	51,  // 33: jungletv.ChatUpdate.disabled:type_name -> jungletv.ChatDisabledEvent
	52,  // 34: jungletv.ChatUpdate.enabled:type_name -> jungletv.ChatEnabledEvent
	53,  // 35: jungletv.ChatUpdate.message_created:type_name -> jungletv.ChatMessageCreatedEvent
	54,  // 36: jungletv.ChatUpdate.message_deleted:type_name -> jungletv.ChatMessageDeletedEvent
	55,  // 37: jungletv.ChatUpdate.heartbeat:type_name -> jungletv.ChatHeartbeatEvent
	56,  // 38: jungletv.ChatUpdate.blocked_user_created:type_name -> jungletv.ChatBlockedUserCreatedEvent
	57,  // 39: jungletv.ChatUpdate.blocked_user_deleted:type_name -> jungletv.ChatBlockedUserDeletedEvent
	171, // 40: jungletv.ChatMessage.created_at:type_name -> google.protobuf.Timestamp
	49,  // 41: jungletv.ChatMessage.user_message:type_name -> jungletv.UserChatMessage
	50,  // 42: jungletv.ChatMessage.system_message:type_name -> jungletv.SystemChatMessage
	48,  // 43: jungletv.ChatMessage.reference:type_name -> jungletv.ChatMessage
	37,  // 44: jungletv.UserChatMessage.author:type_name -> jungletv.User
	5,   // 45: jungletv.ChatDisabledEvent.reason:type_name -> jungletv.ChatDisabledReason
	48,  // 46: jungletv.ChatMessageCreatedEvent.message:type_name -> jungletv.ChatMessage
	172, // 47: jungletv.BanUserRequest.duration:type_name -> google.protobuf.Duration
	171, // 48: jungletv.UserBan.banned_at:type_name -> google.protobuf.Timestamp
	171, // 49: jungletv.UserBan.banned_until:type_name -> google.protobuf.Timestamp
	37,  // 50: jungletv.UserBan.banned_by:type_name -> jungletv.User
	10,  // 51: jungletv.UserBansRequest.pagination_params:type_name -> jungletv.PaginationParameters
	68,  // 52: jungletv.UserBansResponse.user_bans:type_name -> jungletv.UserBan
	6,   // 53: jungletv.SetVideoEnqueuingEnabledRequest.allowed:type_name -> jungletv.AllowedVideoEnqueuingType
	48,  // 54: jungletv.UserChatMessagesResponse.messages:type_name -> jungletv.ChatMessage
	7,   // 55: jungletv.UserPermissionLevelResponse.permission_level:type_name -> jungletv.PermissionLevel
	10,  // 56: jungletv.DisallowedVideosRequest.pagination_params:type_name -> jungletv.PaginationParameters
	171, // 57: jungletv.DisallowedVideo.disallowed_at:type_name -> google.protobuf.Timestamp
	78,  // 58: jungletv.DisallowedVideosResponse.disallowed_videos:type_name -> jungletv.DisallowedVideo
	8,   // 59: jungletv.LeaderboardsRequest.period:type_name -> jungletv.LeaderboardPeriod
	99,  // 60: jungletv.LeaderboardsResponse.leaderboards:type_name -> jungletv.Leaderboard
	100, // 61: jungletv.Leaderboard.rows:type_name -> jungletv.LeaderboardRow
	101, // 62: jungletv.LeaderboardRow.values:type_name -> jungletv.LeaderboardValue
	10,  // 63: jungletv.RewardHistoryRequest.pagination_params:type_name -> jungletv.PaginationParameters
	171, // 64: jungletv.ReceivedReward.received_at:type_name -> google.protobuf.Timestamp
	33,  // 65: jungletv.ReceivedReward.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	103, // 66: jungletv.RewardHistoryResponse.received_rewards:type_name -> jungletv.ReceivedReward
	10,  // 67: jungletv.WithdrawalHistoryRequest.pagination_params:type_name -> jungletv.PaginationParameters
	171, // 68: jungletv.Withdrawal.started_at:type_name -> google.protobuf.Timestamp
	171, // 69: jungletv.Withdrawal.completed_at:type_name -> google.protobuf.Timestamp
	106, // 70: jungletv.WithdrawalHistoryResponse.withdrawals:type_name -> jungletv.Withdrawal
	114, // 71: jungletv.ProduceSegchaChallengeResponse.steps:type_name -> jungletv.SegchaChallengeStep
	123, // 72: jungletv.OngoingRaffleInfoResponse.raffle_info:type_name -> jungletv.OngoingRaffleInfo
	171, // 73: jungletv.OngoingRaffleInfo.period_start:type_name -> google.protobuf.Timestamp
	171, // 74: jungletv.OngoingRaffleInfo.period_end:type_name -> google.protobuf.Timestamp
	171, // 75: jungletv.Spectator.watching_since:type_name -> google.protobuf.Timestamp
	171, // 76: jungletv.Spectator.not_legitimate_since:type_name -> google.protobuf.Timestamp
	171, // 77: jungletv.Spectator.stopped_watching_at:type_name -> google.protobuf.Timestamp
	30,  // 78: jungletv.Spectator.activity_challenge:type_name -> jungletv.ActivityChallenge
	6,   // 79: jungletv.ModerationSettingsOverview.allowed_video_enqueuing:type_name -> jungletv.AllowedVideoEnqueuingType
	9,   // 80: jungletv.Connection.service:type_name -> jungletv.ConnectionService
	171, // 81: jungletv.Connection.created_at:type_name -> google.protobuf.Timestamp
	9,   // 82: jungletv.ServiceInfo.service:type_name -> jungletv.ConnectionService
	139, // 83: jungletv.ConnectionsResponse.connections:type_name -> jungletv.Connection
	140, // 84: jungletv.ConnectionsResponse.service_infos:type_name -> jungletv.ServiceInfo
	9,   // 85: jungletv.CreateConnectionRequest.service:type_name -> jungletv.ConnectionService
	37,  // 86: jungletv.UserProfileResponse.user:type_name -> jungletv.User
	155, // 87: jungletv.UserProfileResponse.recently_played_requests:type_name -> jungletv.PlayedMedia
	33,  // 88: jungletv.UserProfileResponse.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	172, // 89: jungletv.UserStatsForPeriod.requested_media_play_time:type_name -> google.protobuf.Duration
	153, // 90: jungletv.UserStatsResponse.stats_all_time:type_name -> jungletv.UserStatsForPeriod
	153, // 91: jungletv.UserStatsResponse.stats_30_days:type_name -> jungletv.UserStatsForPeriod
	153, // 92: jungletv.UserStatsResponse.stats_7_days:type_name -> jungletv.UserStatsForPeriod
	37,  // 93: jungletv.PlayedMedia.requested_by:type_name -> jungletv.User
	171, // 94: jungletv.PlayedMedia.enqueued_at:type_name -> google.protobuf.Timestamp
	171, // 95: jungletv.PlayedMedia.started_at:type_name -> google.protobuf.Timestamp
	171, // 96: jungletv.PlayedMedia.ended_at:type_name -> google.protobuf.Timestamp
	172, // 97: jungletv.PlayedMedia.length:type_name -> google.protobuf.Duration
	172, // 98: jungletv.PlayedMedia.offset:type_name -> google.protobuf.Duration
	33,  // 99: jungletv.PlayedMedia.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	10,  // 100: jungletv.PlayedMediaHistoryRequest.pagination_params:type_name -> jungletv.PaginationParameters
	155, // 101: jungletv.PlayedMediaHistoryResponse.played_media:type_name -> jungletv.PlayedMedia
	10,  // 102: jungletv.BlockedUsersRequest.pagination_params:type_name -> jungletv.PaginationParameters
	37,  // 103: jungletv.BlockedUser.blocked_user:type_name -> jungletv.User
	37,  // 104: jungletv.BlockedUser.blocked_by:type_name -> jungletv.User
	171, // 105: jungletv.BlockedUser.created_at:type_name -> google.protobuf.Timestamp
	169, // 106: jungletv.BlockedUsersResponse.blocked_users:type_name -> jungletv.BlockedUser
	11,  // 107: jungletv.JungleTV.SignIn:input_type -> jungletv.SignInRequest
	19,  // 108: jungletv.JungleTV.EnqueueMedia:input_type -> jungletv.EnqueueMediaRequest
	24,  // 109: jungletv.JungleTV.RemoveOwnQueueEntry:input_type -> jungletv.RemoveOwnQueueEntryRequest
	23,  // 110: jungletv.JungleTV.MonitorTicket:input_type -> jungletv.MonitorTicketRequest
	26,  // 111: jungletv.JungleTV.ConsumeMedia:input_type -> jungletv.ConsumeMediaRequest
	31,  // 112: jungletv.JungleTV.MonitorQueue:input_type -> jungletv.MonitorQueueRequest
	35,  // 113: jungletv.JungleTV.MonitorSkipAndTip:input_type -> jungletv.MonitorSkipAndTipRequest
	38,  // 114: jungletv.JungleTV.RewardInfo:input_type -> jungletv.RewardInfoRequest
	44,  // 115: jungletv.JungleTV.SubmitActivityChallenge:input_type -> jungletv.SubmitActivityChallengeRequest
	112, // 116: jungletv.JungleTV.ProduceSegchaChallenge:input_type -> jungletv.ProduceSegchaChallengeRequest
	46,  // 117: jungletv.JungleTV.ConsumeChat:input_type -> jungletv.ConsumeChatRequest
	58,  // 118: jungletv.JungleTV.SendChatMessage:input_type -> jungletv.SendChatMessageRequest
	75,  // 119: jungletv.JungleTV.UserPermissionLevel:input_type -> jungletv.UserPermissionLevelRequest
	84,  // 120: jungletv.JungleTV.GetDocument:input_type -> jungletv.GetDocumentRequest
	87,  // 121: jungletv.JungleTV.SetChatNickname:input_type -> jungletv.SetChatNicknameRequest
	95,  // 122: jungletv.JungleTV.Withdraw:input_type -> jungletv.WithdrawRequest
	97,  // 123: jungletv.JungleTV.Leaderboards:input_type -> jungletv.LeaderboardsRequest
	102, // 124: jungletv.JungleTV.RewardHistory:input_type -> jungletv.RewardHistoryRequest
	105, // 125: jungletv.JungleTV.WithdrawalHistory:input_type -> jungletv.WithdrawalHistoryRequest
	121, // 126: jungletv.JungleTV.OngoingRaffleInfo:input_type -> jungletv.OngoingRaffleInfoRequest
	138, // 127: jungletv.JungleTV.Connections:input_type -> jungletv.ConnectionsRequest
	142, // 128: jungletv.JungleTV.CreateConnection:input_type -> jungletv.CreateConnectionRequest
	144, // 129: jungletv.JungleTV.RemoveConnection:input_type -> jungletv.RemoveConnectionRequest
	150, // 130: jungletv.JungleTV.UserProfile:input_type -> jungletv.UserProfileRequest
	152, // 131: jungletv.JungleTV.UserStats:input_type -> jungletv.UserStatsRequest
	156, // 132: jungletv.JungleTV.SetProfileBiography:input_type -> jungletv.SetProfileBiographyRequest
	158, // 133: jungletv.JungleTV.SetProfileFeaturedMedia:input_type -> jungletv.SetProfileFeaturedMediaRequest
	162, // 134: jungletv.JungleTV.PlayedMediaHistory:input_type -> jungletv.PlayedMediaHistoryRequest
	164, // 135: jungletv.JungleTV.BlockUser:input_type -> jungletv.BlockUserRequest
	166, // 136: jungletv.JungleTV.UnblockUser:input_type -> jungletv.UnblockUserRequest
	168, // 137: jungletv.JungleTV.BlockedUsers:input_type -> jungletv.BlockedUsersRequest
	42,  // 138: jungletv.JungleTV.ForciblyEnqueueTicket:input_type -> jungletv.ForciblyEnqueueTicketRequest
	40,  // 139: jungletv.JungleTV.RemoveQueueEntry:input_type -> jungletv.RemoveQueueEntryRequest
	60,  // 140: jungletv.JungleTV.RemoveChatMessage:input_type -> jungletv.RemoveChatMessageRequest
	62,  // 141: jungletv.JungleTV.SetChatSettings:input_type -> jungletv.SetChatSettingsRequest
	71,  // 142: jungletv.JungleTV.SetVideoEnqueuingEnabled:input_type -> jungletv.SetVideoEnqueuingEnabledRequest
	69,  // 143: jungletv.JungleTV.UserBans:input_type -> jungletv.UserBansRequest
	64,  // 144: jungletv.JungleTV.BanUser:input_type -> jungletv.BanUserRequest
	66,  // 145: jungletv.JungleTV.RemoveBan:input_type -> jungletv.RemoveBanRequest
	73,  // 146: jungletv.JungleTV.UserChatMessages:input_type -> jungletv.UserChatMessagesRequest
	77,  // 147: jungletv.JungleTV.DisallowedVideos:input_type -> jungletv.DisallowedVideosRequest
	80,  // 148: jungletv.JungleTV.AddDisallowedVideo:input_type -> jungletv.AddDisallowedVideoRequest
	82,  // 149: jungletv.JungleTV.RemoveDisallowedVideo:input_type -> jungletv.RemoveDisallowedVideoRequest
	85,  // 150: jungletv.JungleTV.UpdateDocument:input_type -> jungletv.Document
	89,  // 151: jungletv.JungleTV.SetUserChatNickname:input_type -> jungletv.SetUserChatNicknameRequest
	91,  // 152: jungletv.JungleTV.SetPricesMultiplier:input_type -> jungletv.SetPricesMultiplierRequest
	93,  // 153: jungletv.JungleTV.SetMinimumPricesMultiplier:input_type -> jungletv.SetMinimumPricesMultiplierRequest
	108, // 154: jungletv.JungleTV.SetCrowdfundedSkippingEnabled:input_type -> jungletv.SetCrowdfundedSkippingEnabledRequest
	110, // 155: jungletv.JungleTV.SetSkipPriceMultiplier:input_type -> jungletv.SetSkipPriceMultiplierRequest
	115, // 156: jungletv.JungleTV.ConfirmRaffleWinner:input_type -> jungletv.ConfirmRaffleWinnerRequest
	117, // 157: jungletv.JungleTV.CompleteRaffle:input_type -> jungletv.CompleteRaffleRequest
	119, // 158: jungletv.JungleTV.RedrawRaffle:input_type -> jungletv.RedrawRaffleRequest
	124, // 159: jungletv.JungleTV.TriggerAnnouncementsNotification:input_type -> jungletv.TriggerAnnouncementsNotificationRequest
	126, // 160: jungletv.JungleTV.SpectatorInfo:input_type -> jungletv.SpectatorInfoRequest
	128, // 161: jungletv.JungleTV.ResetSpectatorStatus:input_type -> jungletv.ResetSpectatorStatusRequest
	130, // 162: jungletv.JungleTV.MonitorModerationSettings:input_type -> jungletv.MonitorModerationSettingsRequest
	132, // 163: jungletv.JungleTV.SetOwnQueueEntryRemovalAllowed:input_type -> jungletv.SetOwnQueueEntryRemovalAllowedRequest
	134, // 164: jungletv.JungleTV.SetNewQueueEntriesAlwaysUnskippable:input_type -> jungletv.SetNewQueueEntriesAlwaysUnskippableRequest
	136, // 165: jungletv.JungleTV.SetSkippingEnabled:input_type -> jungletv.SetSkippingEnabledRequest
	146, // 166: jungletv.JungleTV.SetQueueInsertCursor:input_type -> jungletv.SetQueueInsertCursorRequest
	148, // 167: jungletv.JungleTV.ClearQueueInsertCursor:input_type -> jungletv.ClearQueueInsertCursorRequest
	160, // 168: jungletv.JungleTV.ClearUserProfile:input_type -> jungletv.ClearUserProfileRequest
	12,  // 169: jungletv.JungleTV.SignIn:output_type -> jungletv.SignInProgress
	20,  // 170: jungletv.JungleTV.EnqueueMedia:output_type -> jungletv.EnqueueMediaResponse
	25,  // 171: jungletv.JungleTV.RemoveOwnQueueEntry:output_type -> jungletv.RemoveOwnQueueEntryResponse
	22,  // 172: jungletv.JungleTV.MonitorTicket:output_type -> jungletv.EnqueueMediaTicket
	29,  // 173: jungletv.JungleTV.ConsumeMedia:output_type -> jungletv.MediaConsumptionCheckpoint
	32,  // 174: jungletv.JungleTV.MonitorQueue:output_type -> jungletv.Queue
	36,  // 175: jungletv.JungleTV.MonitorSkipAndTip:output_type -> jungletv.SkipAndTipStatus
	39,  // 176: jungletv.JungleTV.RewardInfo:output_type -> jungletv.RewardInfoResponse
	45,  // 177: jungletv.JungleTV.SubmitActivityChallenge:output_type -> jungletv.SubmitActivityChallengeResponse
	113, // 178: jungletv.JungleTV.ProduceSegchaChallenge:output_type -> jungletv.ProduceSegchaChallengeResponse
	47,  // 179: jungletv.JungleTV.ConsumeChat:output_type -> jungletv.ChatUpdate
	59,  // 180: jungletv.JungleTV.SendChatMessage:output_type -> jungletv.SendChatMessageResponse
	76,  // 181: jungletv.JungleTV.UserPermissionLevel:output_type -> jungletv.UserPermissionLevelResponse
	85,  // 182: jungletv.JungleTV.GetDocument:output_type -> jungletv.Document
	88,  // 183: jungletv.JungleTV.SetChatNickname:output_type -> jungletv.SetChatNicknameResponse
	96,  // 184: jungletv.JungleTV.Withdraw:output_type -> jungletv.WithdrawResponse
	98,  // 185: jungletv.JungleTV.Leaderboards:output_type -> jungletv.LeaderboardsResponse
	104, // 186: jungletv.JungleTV.RewardHistory:output_type -> jungletv.RewardHistoryResponse
	107, // 187: jungletv.JungleTV.WithdrawalHistory:output_type -> jungletv.WithdrawalHistoryResponse
	122, // 188: jungletv.JungleTV.OngoingRaffleInfo:output_type -> jungletv.OngoingRaffleInfoResponse
	141, // 189: jungletv.JungleTV.Connections:output_type -> jungletv.ConnectionsResponse
	143, // 190: jungletv.JungleTV.CreateConnection:output_type -> jungletv.CreateConnectionResponse
	145, // 191: jungletv.JungleTV.RemoveConnection:output_type -> jungletv.RemoveConnectionResponse
	151, // 192: jungletv.JungleTV.UserProfile:output_type -> jungletv.UserProfileResponse
	154, // 193: jungletv.JungleTV.UserStats:output_type -> jungletv.UserStatsResponse
	157, // 194: jungletv.JungleTV.SetProfileBiography:output_type -> jungletv.SetProfileBiographyResponse
	159, // 195: jungletv.JungleTV.SetProfileFeaturedMedia:output_type -> jungletv.SetProfileFeaturedMediaResponse
	163, // 196: jungletv.JungleTV.PlayedMediaHistory:output_type -> jungletv.PlayedMediaHistoryResponse
	165, // 197: jungletv.JungleTV.BlockUser:output_type -> jungletv.BlockUserResponse
	167, // 198: jungletv.JungleTV.UnblockUser:output_type -> jungletv.UnblockUserResponse
	170, // 199: jungletv.JungleTV.BlockedUsers:output_type -> jungletv.BlockedUsersResponse
	43,  // 200: jungletv.JungleTV.ForciblyEnqueueTicket:output_type -> jungletv.ForciblyEnqueueTicketResponse
	41,  // 201: jungletv.JungleTV.RemoveQueueEntry:output_type -> jungletv.RemoveQueueEntryResponse
	61,  // 202: jungletv.JungleTV.RemoveChatMessage:output_type -> jungletv.RemoveChatMessageResponse
	63,  // 203: jungletv.JungleTV.SetChatSettings:output_type -> jungletv.SetChatSettingsResponse
	72,  // 204: jungletv.JungleTV.SetVideoEnqueuingEnabled:output_type -> jungletv.SetVideoEnqueuingEnabledResponse
	70,  // 205: jungletv.JungleTV.UserBans:output_type -> jungletv.UserBansResponse
	65,  // 206: jungletv.JungleTV.BanUser:output_type -> jungletv.BanUserResponse
	67,  // 207: jungletv.JungleTV.RemoveBan:output_type -> jungletv.RemoveBanResponse
	74,  // 208: jungletv.JungleTV.UserChatMessages:output_type -> jungletv.UserChatMessagesResponse
	79,  // 209: jungletv.JungleTV.DisallowedVideos:output_type -> jungletv.DisallowedVideosResponse
	81,  // 210: jungletv.JungleTV.AddDisallowedVideo:output_type -> jungletv.AddDisallowedVideoResponse
	83,  // 211: jungletv.JungleTV.RemoveDisallowedVideo:output_type -> jungletv.RemoveDisallowedVideoResponse
	86,  // 212: jungletv.JungleTV.UpdateDocument:output_type -> jungletv.UpdateDocumentResponse
	90,  // 213: jungletv.JungleTV.SetUserChatNickname:output_type -> jungletv.SetUserChatNicknameResponse
	92,  // 214: jungletv.JungleTV.SetPricesMultiplier:output_type -> jungletv.SetPricesMultiplierResponse
	94,  // 215: jungletv.JungleTV.SetMinimumPricesMultiplier:output_type -> jungletv.SetMinimumPricesMultiplierResponse
	109, // 216: jungletv.JungleTV.SetCrowdfundedSkippingEnabled:output_type -> jungletv.SetCrowdfundedSkippingEnabledResponse
	111, // 217: jungletv.JungleTV.SetSkipPriceMultiplier:output_type -> jungletv.SetSkipPriceMultiplierResponse
	116, // 218: jungletv.JungleTV.ConfirmRaffleWinner:output_type -> jungletv.ConfirmRaffleWinnerResponse
	118, // 219: jungletv.JungleTV.CompleteRaffle:output_type -> jungletv.CompleteRaffleResponse
	120, // 220: jungletv.JungleTV.RedrawRaffle:output_type -> jungletv.RedrawRaffleResponse
	125, // 221: jungletv.JungleTV.TriggerAnnouncementsNotification:output_type -> jungletv.TriggerAnnouncementsNotificationResponse
	127, // 222: jungletv.JungleTV.SpectatorInfo:output_type -> jungletv.Spectator
	129, // 223: jungletv.JungleTV.ResetSpectatorStatus:output_type -> jungletv.ResetSpectatorStatusResponse
	131, // 224: jungletv.JungleTV.MonitorModerationSettings:output_type -> jungletv.ModerationSettingsOverview
	133, // 225: jungletv.JungleTV.SetOwnQueueEntryRemovalAllowed:output_type -> jungletv.SetOwnQueueEntryRemovalAllowedResponse
	135, // 226: jungletv.JungleTV.SetNewQueueEntriesAlwaysUnskippable:output_type -> jungletv.SetNewQueueEntriesAlwaysUnskippableResponse
	137, // 227: jungletv.JungleTV.SetSkippingEnabled:output_type -> jungletv.SetSkippingEnabledResponse
	147, // 228: jungletv.JungleTV.SetQueueInsertCursor:output_type -> jungletv.SetQueueInsertCursorResponse
	149, // 229: jungletv.JungleTV.ClearQueueInsertCursor:output_type -> jungletv.ClearQueueInsertCursorResponse
	161, // 230: jungletv.JungleTV.ClearUserProfile:output_type -> jungletv.ClearUserProfileResponse
	169, // [169:231] is the sub-list for method output_type
	107, // [107:169] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_jungletv_proto_init() }
func file_jungletv_proto_init() {
	if File_jungletv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jungletv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInAccountUnopened); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInVerificationExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueYouTubeVideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueStubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOwnQueueEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOwnQueueEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowPlayingStubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowPlayingYouTubeVideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaConsumptionCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueYouTubeVideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorSkipAndTipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipAndTipStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQueueEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQueueEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForciblyEnqueueTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForciblyEnqueueTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitActivityChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitActivityChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatDisabledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEnabledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHeartbeatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBlockedUserCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBlockedUserDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVideoEnqueuingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVideoEnqueuingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermissionLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermissionLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedVideosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedVideosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDisallowedVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDisallowedVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDisallowedVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDisallowedVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatNicknameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatNicknameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserChatNicknameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserChatNicknameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPricesMultiplierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPricesMultiplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinimumPricesMultiplierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinimumPricesMultiplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCrowdfundedSkippingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCrowdfundedSkippingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkipPriceMultiplierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkipPriceMultiplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSegchaChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSegchaChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegchaChallengeStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRaffleWinnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRaffleWinnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteRaffleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteRaffleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedrawRaffleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedrawRaffleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OngoingRaffleInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OngoingRaffleInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OngoingRaffleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAnnouncementsNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAnnouncementsNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectatorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spectator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSpectatorStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSpectatorStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorModerationSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModerationSettingsOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOwnQueueEntryRemovalAllowedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOwnQueueEntryRemovalAllowedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNewQueueEntriesAlwaysUnskippableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNewQueueEntriesAlwaysUnskippableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkippingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkippingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQueueInsertCursorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQueueInsertCursorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearQueueInsertCursorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearQueueInsertCursorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatsForPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileBiographyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileBiographyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileFeaturedMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileFeaturedMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedMediaHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedMediaHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jungletv_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SignInProgress_Verification)(nil),
		(*SignInProgress_Response)(nil),
		(*SignInProgress_Expired)(nil),
		(*SignInProgress_AccountUnopened)(nil),
	}
	file_jungletv_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*EnqueueMediaRequest_StubData)(nil),
		(*EnqueueMediaRequest_YoutubeVideoData)(nil),
	}
	file_jungletv_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*EnqueueMediaResponse_Ticket)(nil),
		(*EnqueueMediaResponse_Failure)(nil),
	}
	file_jungletv_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*EnqueueMediaTicket_YoutubeVideoData)(nil),
	}
	file_jungletv_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*MediaConsumptionCheckpoint_StubData)(nil),
		(*MediaConsumptionCheckpoint_YoutubeVideoData)(nil),
	}
	file_jungletv_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*QueueEntry_YoutubeVideoData)(nil),
	}
	file_jungletv_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*ChatUpdate_Disabled)(nil),
		(*ChatUpdate_Enabled)(nil),
		(*ChatUpdate_MessageCreated)(nil),
		(*ChatUpdate_MessageDeleted)(nil),
		(*ChatUpdate_Heartbeat)(nil),
		(*ChatUpdate_BlockedUserCreated)(nil),
		(*ChatUpdate_BlockedUserDeleted)(nil),
	}
	file_jungletv_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*ChatMessage_UserMessage)(nil),
		(*ChatMessage_SystemMessage)(nil),
	}
	file_jungletv_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[90].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[91].OneofWrappers = []interface{}{
		(*LeaderboardValue_Amount)(nil),
	}
	file_jungletv_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*ReceivedReward_YoutubeVideoData)(nil),
	}
	file_jungletv_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[113].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[130].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[141].OneofWrappers = []interface{}{
		(*UserProfileResponse_YoutubeVideoData)(nil),
	}
	file_jungletv_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*PlayedMedia_YoutubeVideoData)(nil),
	}
	file_jungletv_proto_msgTypes[148].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[156].OneofWrappers = []interface{}{
		(*UnblockUserRequest_BlockId)(nil),
		(*UnblockUserRequest_Address)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jungletv_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   161,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jungletv_proto_goTypes,
		DependencyIndexes: file_jungletv_proto_depIdxs,
		EnumInfos:         file_jungletv_proto_enumTypes,
		MessageInfos:      file_jungletv_proto_msgTypes,
	}.Build()
	File_jungletv_proto = out.File
	file_jungletv_proto_rawDesc = nil
	file_jungletv_proto_goTypes = nil
	file_jungletv_proto_depIdxs = nil
}
